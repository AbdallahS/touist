/* The following code was generated by JFlex 1.4.1 on 14/03/15 17:02 */

/*
 * 04/27/2010
 *
 * TouistlTokenMaker.java - Scanner for Touistl.
 * 
 * This library is distributed under a modified BSD license.  See the included
 * RSyntaxTextArea.License.txt file for details.
 */
package gui.editor;

import java.io.IOException;

import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.AbstractJFlexCTokenMaker;
import org.fife.ui.rsyntaxtextarea.Token;
import org.fife.ui.rsyntaxtextarea.TokenImpl;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 14/03/15 17:02 from the specification file
 * <tt>jflexSomething</tt>
 */
public class TouistlTokenMaker extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\5\1\0\1\3\1\0\22\0\1\3\1\37\2\0"+
    "\1\7\1\40\1\41\1\0\1\40\1\40\1\40\1\40\1\40\1\42"+
    "\1\6\1\40\12\1\1\40\1\10\1\44\1\43\1\45\1\7\1\0"+
    "\1\2\1\36\21\2\1\35\6\2\1\40\1\0\1\40\1\0\1\4"+
    "\1\0\1\27\1\11\1\31\1\16\1\12\1\21\1\13\1\30\1\14"+
    "\2\2\1\26\1\24\1\15\1\22\1\32\1\34\1\23\1\17\1\20"+
    "\1\25\3\2\1\33\1\2\1\0\1\46\uff83\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\2\1\16\3\1\6\1\1\3\6\1\1\3\0\1\7"+
    "\1\10\5\3\1\11\1\12\12\3\1\11\5\3\1\0"+
    "\1\13\4\3\1\14\1\3\1\14\7\3\1\15\13\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[86];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\47\0\116\0\165\0\234\0\303\0\47\0\47"+
    "\0\352\0\u0111\0\u0138\0\u015f\0\u0186\0\u01ad\0\u01d4\0\u01fb"+
    "\0\u0222\0\u0249\0\u0270\0\u0297\0\u02be\0\u02e5\0\u030c\0\u0333"+
    "\0\u035a\0\u0381\0\u03a8\0\u03cf\0\u03f6\0\u041d\0\303\0\u0444"+
    "\0\352\0\u046b\0\u0492\0\u04b9\0\u04e0\0\u0507\0\u052e\0\u0555"+
    "\0\u057c\0\165\0\u05a3\0\u05ca\0\u05f1\0\u0618\0\u063f\0\u0666"+
    "\0\u068d\0\u06b4\0\u06db\0\u0702\0\165\0\u0729\0\u0750\0\u0777"+
    "\0\u079e\0\u07c5\0\u07ec\0\u0444\0\u0813\0\u083a\0\u0861\0\u0888"+
    "\0\165\0\u08af\0\u08d6\0\u08fd\0\u0924\0\u094b\0\u0972\0\u0999"+
    "\0\u09c0\0\u09e7\0\165\0\u0a0e\0\u0a35\0\u0a5c\0\u0a83\0\u057c"+
    "\0\u0aaa\0\u0ad1\0\u0af8\0\u0b1f\0\u0b46\0\u0b6d";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[86];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\4\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\4\1\24\2\4\1\25\1\4"+
    "\1\26\3\4\1\27\1\30\1\31\1\10\1\32\1\33"+
    "\1\34\1\35\1\10\1\36\50\0\1\3\1\4\1\0"+
    "\1\37\1\0\1\40\2\0\26\4\11\0\2\4\1\0"+
    "\1\4\4\0\26\4\13\0\1\5\44\0\1\37\1\4"+
    "\1\0\1\37\4\0\26\4\11\0\1\41\1\42\1\0"+
    "\1\41\4\0\26\42\20\0\1\43\37\0\2\4\1\0"+
    "\1\4\4\0\1\4\1\44\1\4\1\45\22\4\11\0"+
    "\2\4\1\0\1\4\4\0\4\4\1\46\6\4\1\47"+
    "\1\4\1\50\10\4\11\0\2\4\1\0\1\4\4\0"+
    "\4\4\1\51\3\4\1\52\15\4\11\0\2\4\1\0"+
    "\1\4\4\0\11\4\1\53\14\4\11\0\2\4\1\0"+
    "\1\4\4\0\11\4\1\54\14\4\11\0\2\4\1\0"+
    "\1\4\4\0\1\4\1\55\12\4\1\56\6\4\1\57"+
    "\2\4\11\0\2\4\1\0\1\4\4\0\12\4\1\60"+
    "\4\4\1\61\6\4\11\0\2\4\1\0\1\4\4\0"+
    "\11\4\1\62\3\4\1\63\1\64\7\4\11\0\2\4"+
    "\1\0\1\4\4\0\12\4\1\65\13\4\11\0\2\4"+
    "\1\0\1\4\4\0\11\4\1\66\14\4\11\0\2\4"+
    "\1\0\1\4\4\0\4\4\1\66\21\4\11\0\2\4"+
    "\1\0\1\4\4\0\11\4\1\67\4\4\1\70\7\4"+
    "\11\0\2\4\1\0\1\4\4\0\11\4\1\71\14\4"+
    "\11\0\2\4\1\0\1\4\4\0\11\4\1\72\14\4"+
    "\53\0\1\10\44\0\1\10\47\0\2\10\46\0\1\10"+
    "\1\0\1\10\44\0\1\73\51\0\1\10\1\0\1\74"+
    "\46\0\2\42\1\0\1\42\4\0\26\42\10\0\5\43"+
    "\1\0\41\43\1\0\2\4\1\0\1\4\4\0\2\4"+
    "\1\75\23\4\11\0\2\4\1\0\1\4\4\0\2\4"+
    "\1\76\23\4\11\0\2\4\1\0\1\4\4\0\5\4"+
    "\1\52\20\4\11\0\2\4\1\0\1\4\4\0\21\4"+
    "\1\77\4\4\11\0\2\4\1\0\1\4\4\0\6\4"+
    "\1\100\17\4\11\0\2\4\1\0\1\4\4\0\7\4"+
    "\1\101\16\4\11\0\2\4\1\0\1\4\4\0\7\4"+
    "\1\65\16\4\11\0\2\4\1\0\1\4\4\0\14\4"+
    "\1\102\11\4\11\0\2\4\1\0\1\4\4\0\7\4"+
    "\1\103\16\4\11\0\2\4\1\0\1\4\4\0\1\104"+
    "\25\4\11\0\2\4\1\0\1\4\4\0\12\4\1\53"+
    "\13\4\11\0\2\4\1\0\1\4\4\0\14\4\1\105"+
    "\11\4\11\0\2\4\1\0\1\4\4\0\1\4\1\106"+
    "\24\4\11\0\2\4\1\0\1\4\4\0\12\4\1\107"+
    "\13\4\11\0\2\4\1\0\1\4\4\0\11\4\1\110"+
    "\14\4\11\0\2\4\1\0\1\4\4\0\15\4\1\111"+
    "\10\4\11\0\2\4\1\0\1\4\4\0\5\4\1\65"+
    "\20\4\11\0\2\4\1\0\1\4\4\0\4\4\1\112"+
    "\21\4\11\0\2\4\1\0\1\4\4\0\12\4\1\66"+
    "\13\4\11\0\2\4\1\0\1\4\4\0\21\4\1\113"+
    "\4\4\11\0\2\4\1\0\1\4\4\0\7\4\1\113"+
    "\16\4\55\0\1\10\2\0\2\4\1\0\1\4\4\0"+
    "\3\4\1\106\22\4\11\0\2\4\1\0\1\4\4\0"+
    "\11\4\1\23\4\4\1\25\7\4\11\0\2\4\1\0"+
    "\1\4\4\0\7\4\1\114\16\4\11\0\2\4\1\0"+
    "\1\4\4\0\1\4\1\52\24\4\11\0\2\4\1\0"+
    "\1\4\4\0\1\115\25\4\11\0\2\4\1\0\1\4"+
    "\4\0\6\4\1\52\17\4\11\0\2\4\1\0\1\4"+
    "\4\0\6\4\1\116\17\4\11\0\2\4\1\0\1\4"+
    "\4\0\1\4\1\113\24\4\11\0\2\4\1\0\1\4"+
    "\4\0\4\4\1\52\21\4\11\0\2\4\1\0\1\4"+
    "\4\0\13\4\1\117\12\4\11\0\2\4\1\0\1\4"+
    "\4\0\16\4\1\120\7\4\11\0\2\4\1\0\1\4"+
    "\4\0\6\4\1\105\17\4\11\0\2\4\1\0\1\4"+
    "\4\0\6\4\1\121\17\4\11\0\2\4\1\0\1\4"+
    "\4\0\22\4\1\65\3\4\11\0\2\4\1\0\1\4"+
    "\4\0\15\4\1\122\10\4\11\0\2\4\1\0\1\4"+
    "\4\0\1\4\1\53\24\4\11\0\2\4\1\0\1\4"+
    "\4\0\14\4\1\123\11\4\11\0\2\4\1\0\1\4"+
    "\4\0\7\4\1\124\16\4\11\0\2\4\1\0\1\4"+
    "\4\0\1\4\1\101\24\4\11\0\2\4\1\0\1\4"+
    "\4\0\15\4\1\125\10\4\11\0\2\4\1\0\1\4"+
    "\4\0\16\4\1\126\7\4\11\0\2\4\1\0\1\4"+
    "\4\0\16\4\1\52\7\4\11\0\2\4\1\0\1\4"+
    "\4\0\4\4\1\120\21\4\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2964];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\2\11\26\1\3\0\31\1\1\0"+
    "\33\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[86];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public TouistlTokenMaker() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *                    occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	@Override
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * {@inheritDoc}
	 */
	public String[] getLineCommentStartAndEnd(int languageIndex) {
		return new String[] { "//", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(java.io.Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public TouistlTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public TouistlTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 134) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 10: 
          { addToken(Token.RESERVED_WORD);
          }
        case 14: break;
        case 3: 
          { addToken(Token.IDENTIFIER);
          }
        case 15: break;
        case 11: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 16: break;
        case 9: 
          { addToken(Token.FUNCTION);
          }
        case 17: break;
        case 4: 
          { addToken(Token.WHITESPACE);
          }
        case 18: break;
        case 7: 
          { addToken(Token.VARIABLE);
          }
        case 19: break;
        case 12: 
          { addToken(Token.DATA_TYPE);
          }
        case 20: break;
        case 1: 
          { addToken(Token.ERROR_IDENTIFIER);
          }
        case 21: break;
        case 6: 
          { addToken(Token.OPERATOR);
          }
        case 22: break;
        case 2: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 23: break;
        case 13: 
          { addToken(Token.LITERAL_BOOLEAN);
          }
        case 24: break;
        case 8: 
          { addToken(Token.COMMENT_MARKUP);
          }
        case 25: break;
        case 5: 
          { addNullToken(); return firstToken;
          }
        case 26: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 87: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
