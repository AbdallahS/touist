/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.editionView;

import entity.Model;
import gui.AbstractComponentPanel;
import gui.MainFrame;
import gui.State;
import java.io.File;
import java.util.ListIterator;
import java.util.Map;
import javax.swing.JFileChooser;
import solution.SolverTestSAT4J;

/**
 *
 * @author Skander
 */
public class ParentEditionPanel extends AbstractComponentPanel {

    /**
     * Creates new form FormulasPanel
     */
    public ParentEditionPanel() {
        initComponents();
        errorMessageLabel.setText("");
        editorPanelFormulas.initPalette(PalettePanel.PaletteType.FORMULA);
        editorPanelSets.initPalette(PalettePanel.PaletteType.SET);
        jFileChooser1.setCurrentDirectory(new File("."));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialogErrorMessage = new javax.swing.JDialog();
        jFileChooser1 = new javax.swing.JFileChooser();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        editorPanelFormulas = new gui.editionView.EditionPanel();
        editorPanelSets = new gui.editionView.EditionPanel();
        testButton = new javax.swing.JButton();
        importButton = new javax.swing.JButton();
        errorMessageLabel = new javax.swing.JLabel();

        jDialogErrorMessage.setTitle("Erreur");
        jDialogErrorMessage.setAlwaysOnTop(true);

        javax.swing.GroupLayout jDialogErrorMessageLayout = new javax.swing.GroupLayout(jDialogErrorMessage.getContentPane());
        jDialogErrorMessage.getContentPane().setLayout(jDialogErrorMessageLayout);
        jDialogErrorMessageLayout.setHorizontalGroup(
            jDialogErrorMessageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 317, Short.MAX_VALUE)
        );
        jDialogErrorMessageLayout.setVerticalGroup(
            jDialogErrorMessageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 205, Short.MAX_VALUE)
        );

        jTabbedPane1.setToolTipText("");
        jTabbedPane1.addTab("Formules", editorPanelFormulas);
        jTabbedPane1.addTab("Sets", editorPanelSets);

        testButton.setText("Test");
        testButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testButtonActionPerformed(evt);
            }
        });

        importButton.setText("Importer");
        importButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importButtonActionPerformed(evt);
            }
        });

        errorMessageLabel.setText("<Message d'erreur>");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 713, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(errorMessageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(importButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(testButton)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 510, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(testButton)
                    .addComponent(importButton)
                    .addComponent(errorMessageLabel))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void importButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importButtonActionPerformed
        switch(((MainFrame)(getRootPane().getParent())).state) {
            case EDITION :
                setState(State.EDITION);
                importHandler();
                break;
            case EDITION_ERROR :
                setState(State.EDITION_ERROR);
                importHandler();
                break;
            case NO_RESULT :
                // impossible
                break;
            case SINGLE_RESULT :
                // impossible
                break;
            case FIRST_RESULT :
                // impossible
                break;
            case MIDDLE_RESULT :
                // impossible
                break;
            case LAST_RESULT :
                // impossible
                break;
            default : 
                System.out.println("Undefined action set for the state : " + getState());
        }
    }//GEN-LAST:event_importButtonActionPerformed

    private void testButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testButtonActionPerformed
        switch(((MainFrame)(getRootPane().getParent())).state) {
            case EDITION :
                State state = initResultView();
                if (state != State.EDITION) {
                    setState(state);
                    getFrame().setViewToResults();
                }
                break;
            case EDITION_ERROR :
                // interdit
                break;
            case NO_RESULT :
                // impossible
                break;
            case SINGLE_RESULT :
                // impossible
                break;
            case FIRST_RESULT :
                // impossible
                break;
            case MIDDLE_RESULT :
                // impossible
                break;
            case LAST_RESULT :
                // impossible
                break;
            default : 
                System.out.println("Undefined action set for the state : " + getState());
        }
    }//GEN-LAST:event_testButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private gui.editionView.EditionPanel editorPanelFormulas;
    private gui.editionView.EditionPanel editorPanelSets;
    private javax.swing.JLabel errorMessageLabel;
    private javax.swing.JButton importButton;
    private javax.swing.JDialog jDialogErrorMessage;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton testButton;
    // End of variables declaration//GEN-END:variables

    private void importHandler() {
        String path = "";
        int returnVal;
        
        jFileChooser1.setFileSelectionMode(JFileChooser.FILES_ONLY);
        returnVal = jFileChooser1.showDialog(this, "Importer fichier");
        
        if (returnVal == JFileChooser.APPROVE_OPTION && jFileChooser1.getSelectedFile() != null) {
            path = jFileChooser1.getSelectedFile().getPath();

            try {
                getFrame().getClause().uploadFile(path);
            } catch(Exception e) {
                //TODO handle error message
                System.out.println("Error : Failed to load the file : " + path);
                e.printStackTrace();
            }

            //Réinitialisation des sets et des formules
            String text = "";
            for(String formula : getFrame().getClause().getFormules()) {
                text += formula + "\n";
            }
            editorPanelFormulas.setText(text);
            text = "";
            for(String set : getFrame().getClause().getSets()) {
                text += set + "\n";
            }
            editorPanelSets.setText(text);
        }   
    }

    private State initResultView() {
        // Initialisation de BaseDeClause
        getFrame().getClause().getFormules().clear();
        getFrame().getClause().getSets().clear();
        getFrame().getClause().addFormules(editorPanelFormulas.getText());
        getFrame().getClause().addSets(editorPanelSets.getText());
        
        /*
        Faire appel au solveur avec les fichiers générés par le traducteur
        calculer un model
        Si un model suivant existe
        alors passer a l'état FIRST_RESULT
        sinon passer à l'état SINGLE_RESULT
        Si aucun model n'existe alors passer a l'état NO_RESULT
        */
        String bigAndFilePath = "bigAndFile-defaultname.txt"; //TODO se mettre d'accord sur un nom standard ou ajouter a Translator et BaseDeClause des méthode pour s'échange de objets File
        try {
            getFrame().getClause().saveToFile(bigAndFilePath); //TODO gérer les IOException
            if(! getFrame().getTranslator().translate(bigAndFilePath)) { //TODO gérer les erreurs : return false ou IOException
                //TODO récupérer les erreurs que le traducteur a trouvé
                System.out.println(getFrame().getTranslator().getErrors("").get(0).toString());
                return State.EDITION;
            }
            File f = new File(bigAndFilePath);
            f.deleteOnExit();
        } catch (Exception e) {
            //TODO gérer proprement les exceptions
            e.printStackTrace();
        }
        //Add CurrentPath/dimacsFile
        String translatedFilePath = getFrame().getTranslator().getDimacsFilePath();
        Map<Integer, String> literalsMap = getFrame().getTranslator().getLiteralsMap();
        getFrame().setSolver(new SolverTestSAT4J(translatedFilePath, literalsMap));
        
        try {
            getFrame().getSolver().launch(); //TODO gérer les IOException
        } catch (Exception e) {
            //TODO gérer proprement les exceptions
            e.printStackTrace();
        }
        if(! getFrame().getSolver().isSatisfiable()) {
            System.out.println("Erreur : Clauses non satisfiable");
        }
         //Initialise l'iterator de ResultsPanel
            getFrame().updateResultsPanelIterator();
            
        // Si il y a au moins un model
        try {
            ListIterator<Model> iter = (ListIterator<Model>) getFrame().getSolver().getModelList().iterator();
            /**
             * Si il y a plus d'un model, alors passer à l'état FIRST_RESULT
             * sinon passer à l'état SINGLE_RESULT
             */
            if (iter.hasNext()) {
                getFrame().setResultViewText(iter.next().toString());
                if (iter.hasNext()) {
                   //iter.previous();
                    return State.FIRST_RESULT;
                } else {
                    //iter.previous();
                    return State.SINGLE_RESULT;
                }
            } else {
                return State.SINGLE_RESULT;
            }
        } catch (Exception e) {
            //TODO gérer proprement les exceptions
            e.printStackTrace();
        }
        return State.NO_RESULT;
    }
}
