/*
 *
 * Project TouIST, 2015. Easily formalize and solve real-world sized problems
 * using propositional logic and linear theory of reals with a nice GUI.
 *
 * https://github.com/olzd/touist
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser General Public License
 * (LGPL) version 2.1 which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/lgpl-2.1.html
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * Contributors:
 *     Alexis Comte, Abdelwahab Heba, Olivier Lezaud,
 *     Skander Ben Slimane, Maël Valais
 *
 */

package gui.editorView;

import gui.AbstractComponentPanel;

import java.awt.GridLayout;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author Skander
 */
public class FormulaTablePanel extends AbstractComponentPanel {

    private List<FormulaPanel> panels;

    /**
     * Creates new form FormulaTablePanel
     */
    public FormulaTablePanel() {
        panels = new ArrayList<>();
        addFormula();
        //setLayout(new GridLayout());
        initComponents();
    }

    private void updateFormulaPanels() {
        if (panels.size() == 1) {
            panels.get(0).enableDeleteButton(false);
        }

        for (int i=0; i<panels.size(); i++) {
            if (panels.size() > 1)
                panels.get(i).enableDeleteButton(true);
            panels.get(i).setId(i);
        }

        setLayout(new GridLayout(panels.size(), 1));

        removeAll();
        for (FormulaPanel fp : panels) {
            add(fp);
        }
        updateUI();
    }

    /**
     * Add a new FormulaPanel.
     */
    public void addFormula() {
        panels.add(new FormulaPanel(panels.size()));
        try {
            getFrame().setNumberOfFormulas(getFrame().getNumberOfFormulas() + 1);
        } catch (Exception e) {
            // on fait ce try uniquement parceque a l'initialisation,
            // ce panel n'a pas de parent
            // donc getFrame() provoque soulève une NullPointerException
        }
        updateFormulaPanels();
    }

    /**
     * Remove a fomula.
     * @param id id of the formula to remove.
     */
    public void removeFormula(int id) {
        panels.remove(id);
        getFrame().setNumberOfFormulas(getFrame().getNumberOfFormulas() - 1);
        updateFormulaPanels();
    }

    /**
     * Return the the focused formulaPanel if it exists.
     * @return the formulaPanel that have the focus, null if none of the panels has focus.
     */
    public FormulaPanel getFocusedFormulaPanel() {
        for (FormulaPanel fp : panels) {
            if (fp.isTextFieldFocusOwner()) {
                return fp;
            }
        }
        return null;
    }

    /**
     * Defines if the formulaPanels' remove button is enabled or not.
     * @param b true to enable the remove button, false to disable it.
     */
    public void allowRemoval(boolean b) {
        for(FormulaPanel fp : panels) {
            fp.enableDeleteButton(b);
        }
    }

    /**
     * Return the number of formulaPanel.
     * @return the number of formulaPanel.
     */
    public int getNumberOfFormulas() {
        return panels.size();
    }

    /**
     * Update BaseDeClause when one of the FormulaPanel is edited
     */
    public void formulaPanelContentUpdate() {
        getFrame().getClause().getFormules().clear();
        getFrame().getClause().getSets().clear();

        for(FormulaPanel fp : panels) {
            switch(fp.getType()) {
                case SET :
                    getFrame().getClause().addSet(fp.getText());
                    break;
                case FORMULA :
                    getFrame().getClause().addFormule(fp.getText());
                    break;
                default :
                    System.out.println("Unknown formula panel type : " + fp.getType());
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.GridLayout(1, 1));
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
