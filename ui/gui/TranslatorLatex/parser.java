package gui.TranslatorLatex;


//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150226 (SVN rev 63)
//----------------------------------------------------

import java.io.BufferedReader;
import java.io.FileReader;

//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150226 (SVN rev 63)
//----------------------------------------------------

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150226 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\125\000\002\022\003\000\002\002\004\000\002\022" +
    "\003\000\002\022\004\000\002\022\004\000\002\022\002" +
    "\000\002\005\005\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\014\000\002\004\007\000\002\006\005\000\002\006" +
    "\003\000\002\006\003\000\002\006\005\000\002\006\007" +
    "\000\002\006\005\000\002\006\005\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\006\005\000\002" +
    "\006\006\000\002\006\005\000\002\006\005\000\002\006" +
    "\004\000\002\006\005\000\002\006\005\000\002\006\005" +
    "\000\002\012\003\000\002\012\003\000\002\010\005\000" +
    "\002\010\003\000\002\010\003\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\004\000\002\010" +
    "\005\000\002\010\005\000\002\010\006\000\002\010\006" +
    "\000\002\010\006\000\002\010\006\000\002\011\003\000" +
    "\002\011\003\000\002\007\005\000\002\007\003\000\002" +
    "\007\005\000\002\007\007\000\002\007\010\000\002\007" +
    "\010\000\002\007\010\000\002\013\003\000\002\013\005" +
    "\000\002\023\003\000\002\023\006\000\002\023\006\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\015\005\000\002\015\003\000\002\015\003\000\002\015" +
    "\006\000\002\015\003\000\002\015\004\000\002\015\005" +
    "\000\002\015\005\000\002\015\005\000\002\015\005\000" +
    "\002\015\005\000\002\015\004\000\002\015\004\000\002" +
    "\016\003\000\002\016\003\000\002\017\012\000\002\017" +
    "\010\000\002\020\003\000\002\020\005\000\002\021\003" +
    "\000\002\021\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\304\000\064\002\ufffc\010\016\015\010\016\026\017" +
    "\006\020\004\022\012\025\045\026\042\027\021\030\014" +
    "\033\015\034\033\035\031\036\030\052\044\056\011\060" +
    "\027\070\032\071\036\072\035\075\043\076\034\077\041" +
    "\100\013\001\002\000\004\075\043\001\002\000\064\002" +
    "\001\010\016\015\010\016\026\017\006\020\004\022\012" +
    "\025\045\026\042\027\021\030\014\033\015\034\033\035" +
    "\031\036\030\052\044\056\011\060\027\070\032\071\036" +
    "\072\035\075\043\076\034\077\041\100\013\001\002\000" +
    "\004\075\043\001\002\000\066\002\uffff\010\016\015\010" +
    "\016\026\017\006\020\004\021\066\022\012\025\045\026" +
    "\042\027\021\030\014\033\015\034\033\035\031\036\030" +
    "\052\044\056\011\060\027\070\032\071\036\072\035\075" +
    "\043\076\034\077\041\100\013\001\002\000\004\052\257" +
    "\001\002\000\024\015\010\016\026\027\021\030\014\052" +
    "\124\056\011\075\043\076\034\077\041\001\002\000\062" +
    "\010\016\015\010\016\026\017\006\020\004\022\012\025" +
    "\045\026\042\027\021\030\014\033\015\034\033\035\031" +
    "\036\030\052\044\056\011\060\027\070\032\071\036\072" +
    "\035\075\043\076\034\077\041\100\013\001\002\000\106" +
    "\002\uffbd\005\uffbd\010\uffbd\012\uffbd\015\uffbd\016\uffbd\017" +
    "\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd" +
    "\026\uffbd\027\uffbd\030\uffbd\033\uffbd\034\uffbd\035\uffbd\036" +
    "\uffbd\050\uffbd\051\uffbd\052\247\053\uffbd\056\uffbd\060\uffbd" +
    "\065\uffbd\070\uffbd\071\uffbd\072\uffbd\075\uffbd\076\uffbd\077" +
    "\uffbd\100\uffbd\001\002\000\004\052\244\001\002\000\116" +
    "\002\uffe1\005\uffe1\010\uffe1\012\uffe1\015\uffe1\016\uffe1\017" +
    "\uffe1\020\uffe1\021\uffe1\022\uffe1\025\uffe1\026\uffe1\027\uffe1" +
    "\030\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\046" +
    "\uffe1\047\uffe1\050\uffe1\051\uffe1\052\uffe1\053\uffe1\056\uffe1" +
    "\060\uffe1\061\uffe1\063\uffe1\064\uffe1\065\uffe1\070\uffe1\071" +
    "\uffe1\072\uffe1\075\uffe1\076\uffe1\077\uffe1\100\uffe1\001\002" +
    "\000\004\032\233\001\002\000\142\002\uffde\005\uffde\010" +
    "\uffde\012\uffde\015\uffde\016\uffde\017\uffde\020\uffde\021\uffde" +
    "\022\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032" +
    "\uffde\033\uffde\034\uffde\035\uffde\036\uffde\040\uffde\041\uffde" +
    "\042\uffde\043\uffde\044\uffde\045\uffde\046\uffde\047\uffde\050" +
    "\uffde\051\uffde\052\uffde\053\uffde\054\uffde\055\uffde\056\uffde" +
    "\057\uffde\060\uffde\061\uffde\062\uffde\064\uffde\065\uffde\070" +
    "\uffde\071\uffde\072\uffde\075\uffde\076\uffde\077\uffde\100\uffde" +
    "\001\002\000\004\002\232\001\002\000\004\052\227\001" +
    "\002\000\106\002\ufff9\005\ufff9\010\ufff9\012\ufff9\015\ufff9" +
    "\016\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\025\ufff9\026" +
    "\ufff9\027\ufff9\030\ufff9\033\ufff9\034\ufff9\035\ufff9\036\ufff9" +
    "\046\146\047\144\050\143\051\142\052\ufff9\053\ufff9\056" +
    "\ufff9\060\ufff9\065\147\070\ufff9\071\ufff9\072\ufff9\075\ufff9" +
    "\076\ufff9\077\ufff9\100\ufff9\001\002\000\120\002\ufff8\005" +
    "\ufff8\010\ufff8\012\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8" +
    "\021\ufff8\022\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8\031" +
    "\113\033\ufff8\034\ufff8\035\ufff8\036\ufff8\040\117\041\116" +
    "\042\111\043\122\044\115\045\121\052\ufff8\053\ufff8\054" +
    "\120\055\112\056\114\057\110\060\ufff8\070\ufff8\071\ufff8" +
    "\072\ufff8\075\ufff8\076\ufff8\077\ufff8\100\ufff8\001\002\000" +
    "\112\002\ufff2\005\ufff2\010\ufff2\012\ufff2\015\ufff2\016\ufff2" +
    "\017\ufff2\020\ufff2\021\ufff2\022\ufff2\025\ufff2\026\ufff2\027" +
    "\ufff2\030\ufff2\032\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2" +
    "\046\ufff2\047\ufff2\050\ufff2\051\ufff2\052\ufff2\053\ufff2\056" +
    "\ufff2\060\ufff2\064\ufff2\065\ufff2\070\ufff2\071\ufff2\072\ufff2" +
    "\075\ufff2\076\ufff2\077\ufff2\100\ufff2\001\002\000\106\002" +
    "\ufff6\005\ufff6\010\ufff6\012\ufff6\015\ufff6\016\ufff6\017\ufff6" +
    "\020\ufff6\021\ufff6\022\ufff6\023\076\024\072\025\ufff6\026" +
    "\ufff6\027\ufff6\030\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6" +
    "\050\073\051\071\052\ufff6\053\ufff6\056\ufff6\060\ufff6\065" +
    "\074\070\ufff6\071\ufff6\072\ufff6\075\ufff6\076\ufff6\077\ufff6" +
    "\100\ufff6\001\002\000\004\052\224\001\002\000\032\015" +
    "\010\016\026\027\021\030\014\033\015\034\033\052\124" +
    "\056\011\075\043\076\034\077\041\100\161\001\002\000" +
    "\106\002\uffbf\005\uffbf\010\uffbf\012\uffbf\015\uffbf\016\uffbf" +
    "\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025" +
    "\uffbf\026\uffbf\027\uffbf\030\uffbf\033\uffbf\034\uffbf\035\uffbf" +
    "\036\uffbf\050\uffbf\051\uffbf\052\uffbf\053\uffbf\056\uffbf\060" +
    "\uffbf\065\uffbf\070\uffbf\071\uffbf\072\uffbf\075\uffbf\076\uffbf" +
    "\077\uffbf\100\uffbf\001\002\000\106\002\uffc0\005\uffc0\010" +
    "\uffc0\012\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0" +
    "\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0\030" +
    "\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0\050\uffc0\051\uffc0" +
    "\052\uffc0\053\uffc0\056\uffc0\060\uffc0\065\uffc0\070\uffc0\071" +
    "\uffc0\072\uffc0\075\uffc0\076\uffc0\077\uffc0\100\uffc0\001\002" +
    "\000\004\052\205\001\002\000\116\002\uffe0\005\uffe0\010" +
    "\uffe0\012\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0" +
    "\022\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\032\uffe0\033" +
    "\uffe0\034\uffe0\035\uffe0\036\uffe0\046\uffe0\047\uffe0\050\uffe0" +
    "\051\uffe0\052\uffe0\053\uffe0\056\uffe0\060\uffe0\061\uffe0\063" +
    "\uffe0\064\uffe0\065\uffe0\070\uffe0\071\uffe0\072\uffe0\075\uffe0" +
    "\076\uffe0\077\uffe0\100\uffe0\001\002\000\144\002\uffd2\005" +
    "\uffd2\010\uffd2\012\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2" +
    "\021\uffd2\022\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031" +
    "\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\040\uffd2" +
    "\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2\047" +
    "\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2\055\uffd2" +
    "\056\uffd2\057\uffd2\060\uffd2\061\uffd2\062\uffd2\063\uffd2\064" +
    "\uffd2\065\uffd2\070\uffd2\071\uffd2\072\uffd2\075\uffd2\076\uffd2" +
    "\077\uffd2\100\uffd2\001\002\000\004\052\200\001\002\000" +
    "\004\052\173\001\002\000\130\002\ufffa\010\ufffa\015\ufffa" +
    "\016\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa\025\ufffa\026" +
    "\ufffa\027\ufffa\030\ufffa\031\uffdd\033\ufffa\034\ufffa\035\ufffa" +
    "\036\ufffa\037\171\040\uffdd\041\uffdd\042\uffdd\043\uffdd\044" +
    "\uffdd\045\uffdd\046\ufff1\047\ufff1\050\ufff1\051\ufff1\052\ufffa" +
    "\054\uffdd\055\uffdd\056\ufffa\057\uffdd\060\ufffa\065\ufff1\067" +
    "\uffcf\070\ufffa\071\ufffa\072\ufffa\075\ufffa\076\ufffa\077\ufffa" +
    "\100\ufffa\001\002\000\076\002\ufff7\005\ufff7\010\ufff7\012" +
    "\ufff7\015\ufff7\016\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7" +
    "\025\ufff7\026\ufff7\027\ufff7\030\ufff7\033\ufff7\034\ufff7\035" +
    "\ufff7\036\ufff7\052\ufff7\053\ufff7\056\ufff7\060\ufff7\067\063" +
    "\070\ufff7\071\ufff7\072\ufff7\075\ufff7\076\ufff7\077\ufff7\100" +
    "\ufff7\001\002\000\144\002\uffd1\005\uffd1\010\uffd1\012\uffd1" +
    "\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\025" +
    "\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1" +
    "\034\uffd1\035\uffd1\036\uffd1\040\uffd1\041\uffd1\042\uffd1\043" +
    "\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1" +
    "\052\uffd1\053\uffd1\054\uffd1\055\uffd1\056\uffd1\057\uffd1\060" +
    "\uffd1\061\uffd1\062\uffd1\063\uffd1\064\uffd1\065\uffd1\070\uffd1" +
    "\071\uffd1\072\uffd1\075\uffd1\076\uffd1\077\uffd1\100\uffd1\001" +
    "\002\000\004\052\165\001\002\000\152\002\uffc7\005\uffc7" +
    "\010\uffc7\012\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021" +
    "\uffc7\022\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7" +
    "\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040" +
    "\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7" +
    "\047\uffc7\050\uffc7\051\uffc7\052\155\053\uffc7\054\uffc7\055" +
    "\uffc7\056\uffc7\057\uffc7\060\uffc7\061\uffc7\062\uffc7\063\uffc7" +
    "\064\uffc7\065\uffc7\067\uffc7\070\uffc7\071\uffc7\072\uffc7\073" +
    "\uffc7\075\uffc7\076\uffc7\077\uffc7\100\uffc7\001\002\000\062" +
    "\010\016\015\010\016\026\017\006\020\004\022\012\025" +
    "\045\026\042\027\021\030\014\033\015\034\033\035\031" +
    "\036\030\052\044\056\011\060\027\070\032\071\036\072" +
    "\035\075\043\076\034\077\041\100\013\001\002\000\004" +
    "\052\046\001\002\000\016\052\051\060\027\070\032\071" +
    "\036\072\035\075\043\001\002\000\004\053\054\001\002" +
    "\000\116\002\uffcf\005\uffcf\010\uffcf\012\uffcf\015\uffcf\016" +
    "\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\025\uffcf\026\uffcf" +
    "\027\uffcf\030\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036" +
    "\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf\052\uffcf\053\uffcf" +
    "\056\uffcf\060\uffcf\063\uffcf\064\uffcf\065\uffcf\070\uffcf\071" +
    "\uffcf\072\uffcf\073\uffcf\075\uffcf\076\uffcf\077\uffcf\100\uffcf" +
    "\001\002\000\016\052\051\060\027\070\032\071\036\072" +
    "\035\075\043\001\002\000\004\053\053\001\002\000\120" +
    "\002\uffd0\005\uffd0\010\uffd0\012\uffd0\015\uffd0\016\uffd0\017" +
    "\uffd0\020\uffd0\021\uffd0\022\uffd0\025\uffd0\026\uffd0\027\uffd0" +
    "\030\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\046" +
    "\uffd0\047\uffd0\050\uffd0\051\uffd0\052\uffd0\053\uffd0\056\uffd0" +
    "\060\uffd0\063\uffd0\064\uffd0\065\uffd0\067\uffd0\070\uffd0\071" +
    "\uffd0\072\uffd0\073\uffd0\075\uffd0\076\uffd0\077\uffd0\100\uffd0" +
    "\001\002\000\112\002\uffe8\005\uffe8\010\uffe8\012\uffe8\015" +
    "\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\025\uffe8" +
    "\026\uffe8\027\uffe8\030\uffe8\032\uffe8\033\uffe8\034\uffe8\035" +
    "\uffe8\036\uffe8\046\uffe8\047\uffe8\050\uffe8\051\uffe8\052\uffe8" +
    "\053\uffe8\056\uffe8\060\uffe8\064\uffe8\065\uffe8\070\uffe8\071" +
    "\uffe8\072\uffe8\075\uffe8\076\uffe8\077\uffe8\100\uffe8\001\002" +
    "\000\004\021\066\001\002\000\020\021\ufff9\046\146\047" +
    "\144\050\143\051\142\053\145\065\147\001\002\000\034" +
    "\021\ufff8\031\113\040\117\041\116\042\111\043\122\044" +
    "\115\045\121\053\123\054\120\055\112\056\114\057\110" +
    "\001\002\000\020\021\ufff6\023\076\024\072\050\073\051" +
    "\071\053\075\065\074\001\002\000\140\002\ufffa\005\ufffa" +
    "\010\ufffa\012\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa\021" +
    "\ufffa\022\ufffa\025\ufffa\026\ufffa\027\ufffa\030\ufffa\031\uffdd" +
    "\032\ufff1\033\ufffa\034\ufffa\035\ufffa\036\ufffa\040\uffdd\041" +
    "\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd\046\ufff1\047\ufff1" +
    "\050\ufff1\051\ufff1\052\ufffa\053\ufffa\054\uffdd\055\uffdd\056" +
    "\ufffa\057\uffdd\060\ufffa\064\ufff1\065\ufff1\067\uffcf\070\ufffa" +
    "\071\ufffa\072\ufffa\075\ufffa\076\ufffa\077\ufffa\100\ufffa\001" +
    "\002\000\010\021\ufff7\053\053\067\063\001\002\000\004" +
    "\052\064\001\002\000\062\010\016\015\010\016\026\017" +
    "\006\020\004\022\012\025\045\026\042\027\021\030\014" +
    "\033\015\034\033\035\031\036\030\052\044\056\011\060" +
    "\027\070\032\071\036\072\035\075\043\076\034\077\041" +
    "\100\013\001\002\000\006\021\066\053\067\001\002\000" +
    "\016\052\051\060\027\070\032\071\036\072\035\075\043" +
    "\001\002\000\074\002\ufff4\005\ufff4\010\ufff4\012\ufff4\015" +
    "\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\025\ufff4" +
    "\026\ufff4\027\ufff4\030\ufff4\033\ufff4\034\ufff4\035\ufff4\036" +
    "\ufff4\052\ufff4\053\ufff4\056\ufff4\060\ufff4\070\ufff4\071\ufff4" +
    "\072\ufff4\075\ufff4\076\ufff4\077\ufff4\100\ufff4\001\002\000" +
    "\112\002\ufff0\005\ufff0\010\ufff0\012\ufff0\015\ufff0\016\ufff0" +
    "\017\ufff0\020\ufff0\021\ufff0\022\ufff0\025\ufff0\026\ufff0\027" +
    "\ufff0\030\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0" +
    "\046\ufff0\047\ufff0\050\ufff0\051\ufff0\052\ufff0\053\ufff0\056" +
    "\ufff0\060\ufff0\064\ufff0\065\ufff0\070\ufff0\071\ufff0\072\ufff0" +
    "\075\ufff0\076\ufff0\077\ufff0\100\ufff0\001\002\000\020\017" +
    "\006\020\004\022\100\035\031\036\030\052\101\100\013" +
    "\001\002\000\020\017\006\020\004\022\100\035\031\036" +
    "\030\052\101\100\013\001\002\000\020\017\006\020\004" +
    "\022\100\035\031\036\030\052\101\100\013\001\002\000" +
    "\020\017\006\020\004\022\100\035\031\036\030\052\101" +
    "\100\013\001\002\000\106\002\uffc1\005\uffc1\010\uffc1\012" +
    "\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1" +
    "\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1\033" +
    "\uffc1\034\uffc1\035\uffc1\036\uffc1\050\uffc1\051\uffc1\052\uffc1" +
    "\053\uffc1\056\uffc1\060\uffc1\065\uffc1\070\uffc1\071\uffc1\072" +
    "\uffc1\075\uffc1\076\uffc1\077\uffc1\100\uffc1\001\002\000\020" +
    "\017\006\020\004\022\100\035\031\036\030\052\101\100" +
    "\013\001\002\000\106\002\uffba\005\uffba\010\uffba\012\uffba" +
    "\015\uffba\016\uffba\017\uffba\020\uffba\021\uffba\022\uffba\023" +
    "\uffba\024\uffba\025\uffba\026\uffba\027\uffba\030\uffba\033\uffba" +
    "\034\uffba\035\uffba\036\uffba\050\uffba\051\uffba\052\uffba\053" +
    "\uffba\056\uffba\060\uffba\065\uffba\070\uffba\071\uffba\072\uffba" +
    "\075\uffba\076\uffba\077\uffba\100\uffba\001\002\000\020\017" +
    "\006\020\004\022\100\035\031\036\030\052\101\100\013" +
    "\001\002\000\020\017\006\020\004\022\100\035\031\036" +
    "\030\052\101\100\013\001\002\000\016\023\076\024\072" +
    "\050\073\051\071\053\075\065\074\001\002\000\106\002" +
    "\uffbc\005\uffbc\010\uffbc\012\uffbc\015\uffbc\016\uffbc\017\uffbc" +
    "\020\uffbc\021\uffbc\022\uffbc\023\076\024\072\025\uffbc\026" +
    "\uffbc\027\uffbc\030\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc" +
    "\050\073\051\071\052\uffbc\053\uffbc\056\uffbc\060\uffbc\065" +
    "\074\070\uffbc\071\uffbc\072\uffbc\075\uffbc\076\uffbc\077\uffbc" +
    "\100\uffbc\001\002\000\106\002\uffb9\005\uffb9\010\uffb9\012" +
    "\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9" +
    "\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\033" +
    "\uffb9\034\uffb9\035\uffb9\036\uffb9\050\uffb9\051\uffb9\052\uffb9" +
    "\053\uffb9\056\uffb9\060\uffb9\065\uffb9\070\uffb9\071\uffb9\072" +
    "\uffb9\075\uffb9\076\uffb9\077\uffb9\100\uffb9\001\002\000\106" +
    "\002\uffb8\005\uffb8\010\uffb8\012\uffb8\015\uffb8\016\uffb8\017" +
    "\uffb8\020\uffb8\021\uffb8\022\uffb8\023\076\024\072\025\uffb8" +
    "\026\uffb8\027\uffb8\030\uffb8\033\uffb8\034\uffb8\035\uffb8\036" +
    "\uffb8\050\uffb8\051\uffb8\052\uffb8\053\uffb8\056\uffb8\060\uffb8" +
    "\065\074\070\uffb8\071\uffb8\072\uffb8\075\uffb8\076\uffb8\077" +
    "\uffb8\100\uffb8\001\002\000\106\002\uffbb\005\uffbb\010\uffbb" +
    "\012\uffbb\015\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\022" +
    "\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb" +
    "\033\uffbb\034\uffbb\035\uffbb\036\uffbb\050\uffbb\051\uffbb\052" +
    "\uffbb\053\uffbb\056\uffbb\060\uffbb\065\uffbb\070\uffbb\071\uffbb" +
    "\072\uffbb\075\uffbb\076\uffbb\077\uffbb\100\uffbb\001\002\000" +
    "\106\002\uffb7\005\uffb7\010\uffb7\012\uffb7\015\uffb7\016\uffb7" +
    "\017\uffb7\020\uffb7\021\uffb7\022\uffb7\023\076\024\072\025" +
    "\uffb7\026\uffb7\027\uffb7\030\uffb7\033\uffb7\034\uffb7\035\uffb7" +
    "\036\uffb7\050\uffb7\051\uffb7\052\uffb7\053\uffb7\056\uffb7\060" +
    "\uffb7\065\074\070\uffb7\071\uffb7\072\uffb7\075\uffb7\076\uffb7" +
    "\077\uffb7\100\uffb7\001\002\000\024\015\010\016\026\027" +
    "\021\030\014\052\124\056\011\075\043\076\034\077\041" +
    "\001\002\000\024\015\010\016\026\027\021\030\014\052" +
    "\124\056\011\075\043\076\034\077\041\001\002\000\024" +
    "\015\010\016\026\027\021\030\014\052\124\056\011\075" +
    "\043\076\034\077\041\001\002\000\024\015\010\016\026" +
    "\027\021\030\014\052\124\056\011\075\043\076\034\077" +
    "\041\001\002\000\024\015\010\016\026\027\021\030\014" +
    "\052\124\056\011\075\043\076\034\077\041\001\002\000" +
    "\024\015\010\016\026\027\021\030\014\052\124\056\011" +
    "\075\043\076\034\077\041\001\002\000\024\015\010\016" +
    "\026\027\021\030\014\052\124\056\011\075\043\076\034" +
    "\077\041\001\002\000\024\015\010\016\026\027\021\030" +
    "\014\052\124\056\011\075\043\076\034\077\041\001\002" +
    "\000\024\015\010\016\026\027\021\030\014\052\124\056" +
    "\011\075\043\076\034\077\041\001\002\000\024\015\010" +
    "\016\026\027\021\030\014\052\124\056\011\075\043\076" +
    "\034\077\041\001\002\000\024\015\010\016\026\027\021" +
    "\030\014\052\124\056\011\075\043\076\034\077\041\001" +
    "\002\000\142\002\uffdf\005\uffdf\010\uffdf\012\uffdf\015\uffdf" +
    "\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\025\uffdf\026" +
    "\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf" +
    "\035\uffdf\036\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf\044" +
    "\uffdf\045\uffdf\046\uffdf\047\uffdf\050\uffdf\051\uffdf\052\uffdf" +
    "\053\uffdf\054\uffdf\055\uffdf\056\uffdf\057\uffdf\060\uffdf\061" +
    "\uffdf\062\uffdf\064\uffdf\065\uffdf\070\uffdf\071\uffdf\072\uffdf" +
    "\075\uffdf\076\uffdf\077\uffdf\100\uffdf\001\002\000\024\015" +
    "\010\016\026\027\021\030\014\052\124\056\011\075\043" +
    "\076\034\077\041\001\002\000\122\002\uffeb\005\uffeb\010" +
    "\uffeb\012\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb" +
    "\022\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb\031\113\032" +
    "\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\046\uffeb\047\uffeb" +
    "\050\uffeb\051\uffeb\052\uffeb\053\uffeb\054\120\055\112\056" +
    "\114\057\110\060\uffeb\064\uffeb\065\uffeb\070\uffeb\071\uffeb" +
    "\072\uffeb\075\uffeb\076\uffeb\077\uffeb\100\uffeb\001\002\000" +
    "\142\002\uffdd\005\uffdd\010\uffdd\012\uffdd\015\uffdd\016\uffdd" +
    "\017\uffdd\020\uffdd\021\uffdd\022\uffdd\025\uffdd\026\uffdd\027" +
    "\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd" +
    "\036\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd\045" +
    "\uffdd\046\uffdd\047\uffdd\050\uffdd\051\uffdd\052\uffdd\053\uffdd" +
    "\054\uffdd\055\uffdd\056\uffdd\057\uffdd\060\uffdd\061\uffdd\062" +
    "\uffdd\064\uffdd\065\uffdd\070\uffdd\071\uffdd\072\uffdd\075\uffdd" +
    "\076\uffdd\077\uffdd\100\uffdd\001\002\000\016\031\113\053" +
    "\123\054\120\055\112\056\114\057\110\001\002\000\122" +
    "\002\uffe9\005\uffe9\010\uffe9\012\uffe9\015\uffe9\016\uffe9\017" +
    "\uffe9\020\uffe9\021\uffe9\022\uffe9\025\uffe9\026\uffe9\027\uffe9" +
    "\030\uffe9\031\113\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036" +
    "\uffe9\046\uffe9\047\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9" +
    "\054\120\055\112\056\114\057\110\060\uffe9\064\uffe9\065" +
    "\uffe9\070\uffe9\071\uffe9\072\uffe9\075\uffe9\076\uffe9\077\uffe9" +
    "\100\uffe9\001\002\000\142\002\uffdc\005\uffdc\010\uffdc\012" +
    "\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc" +
    "\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033" +
    "\uffdc\034\uffdc\035\uffdc\036\uffdc\040\uffdc\041\uffdc\042\uffdc" +
    "\043\uffdc\044\uffdc\045\uffdc\046\uffdc\047\uffdc\050\uffdc\051" +
    "\uffdc\052\uffdc\053\uffdc\054\uffdc\055\uffdc\056\uffdc\057\uffdc" +
    "\060\uffdc\061\uffdc\062\uffdc\064\uffdc\065\uffdc\070\uffdc\071" +
    "\uffdc\072\uffdc\075\uffdc\076\uffdc\077\uffdc\100\uffdc\001\002" +
    "\000\122\002\uffee\005\uffee\010\uffee\012\uffee\015\uffee\016" +
    "\uffee\017\uffee\020\uffee\021\uffee\022\uffee\025\uffee\026\uffee" +
    "\027\uffee\030\uffee\031\113\032\uffee\033\uffee\034\uffee\035" +
    "\uffee\036\uffee\046\uffee\047\uffee\050\uffee\051\uffee\052\uffee" +
    "\053\uffee\054\120\055\112\056\114\057\110\060\uffee\064" +
    "\uffee\065\uffee\070\uffee\071\uffee\072\uffee\075\uffee\076\uffee" +
    "\077\uffee\100\uffee\001\002\000\122\002\uffed\005\uffed\010" +
    "\uffed\012\uffed\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed" +
    "\022\uffed\025\uffed\026\uffed\027\uffed\030\uffed\031\113\032" +
    "\uffed\033\uffed\034\uffed\035\uffed\036\uffed\046\uffed\047\uffed" +
    "\050\uffed\051\uffed\052\uffed\053\uffed\054\120\055\112\056" +
    "\114\057\110\060\uffed\064\uffed\065\uffed\070\uffed\071\uffed" +
    "\072\uffed\075\uffed\076\uffed\077\uffed\100\uffed\001\002\000" +
    "\122\002\uffea\005\uffea\010\uffea\012\uffea\015\uffea\016\uffea" +
    "\017\uffea\020\uffea\021\uffea\022\uffea\025\uffea\026\uffea\027" +
    "\uffea\030\uffea\031\113\032\uffea\033\uffea\034\uffea\035\uffea" +
    "\036\uffea\046\uffea\047\uffea\050\uffea\051\uffea\052\uffea\053" +
    "\uffea\054\120\055\112\056\114\057\110\060\uffea\064\uffea" +
    "\065\uffea\070\uffea\071\uffea\072\uffea\075\uffea\076\uffea\077" +
    "\uffea\100\uffea\001\002\000\142\002\uffda\005\uffda\010\uffda" +
    "\012\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022" +
    "\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda" +
    "\033\uffda\034\uffda\035\uffda\036\uffda\040\uffda\041\uffda\042" +
    "\uffda\043\uffda\044\uffda\045\uffda\046\uffda\047\uffda\050\uffda" +
    "\051\uffda\052\uffda\053\uffda\054\uffda\055\uffda\056\uffda\057" +
    "\uffda\060\uffda\061\uffda\062\uffda\064\uffda\065\uffda\070\uffda" +
    "\071\uffda\072\uffda\075\uffda\076\uffda\077\uffda\100\uffda\001" +
    "\002\000\142\002\uffd7\005\uffd7\010\uffd7\012\uffd7\015\uffd7" +
    "\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\025\uffd7\026" +
    "\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7" +
    "\035\uffd7\036\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7\044" +
    "\uffd7\045\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7" +
    "\053\uffd7\054\uffd7\055\uffd7\056\uffd7\057\uffd7\060\uffd7\061" +
    "\uffd7\062\uffd7\064\uffd7\065\uffd7\070\uffd7\071\uffd7\072\uffd7" +
    "\075\uffd7\076\uffd7\077\uffd7\100\uffd7\001\002\000\142\002" +
    "\uffdb\005\uffdb\010\uffdb\012\uffdb\015\uffdb\016\uffdb\017\uffdb" +
    "\020\uffdb\021\uffdb\022\uffdb\025\uffdb\026\uffdb\027\uffdb\030" +
    "\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb" +
    "\040\uffdb\041\uffdb\042\uffdb\043\uffdb\044\uffdb\045\uffdb\046" +
    "\uffdb\047\uffdb\050\uffdb\051\uffdb\052\uffdb\053\uffdb\054\uffdb" +
    "\055\uffdb\056\uffdb\057\uffdb\060\uffdb\061\uffdb\062\uffdb\064" +
    "\uffdb\065\uffdb\070\uffdb\071\uffdb\072\uffdb\075\uffdb\076\uffdb" +
    "\077\uffdb\100\uffdb\001\002\000\122\002\uffec\005\uffec\010" +
    "\uffec\012\uffec\015\uffec\016\uffec\017\uffec\020\uffec\021\uffec" +
    "\022\uffec\025\uffec\026\uffec\027\uffec\030\uffec\031\113\032" +
    "\uffec\033\uffec\034\uffec\035\uffec\036\uffec\046\uffec\047\uffec" +
    "\050\uffec\051\uffec\052\uffec\053\uffec\054\120\055\112\056" +
    "\114\057\110\060\uffec\064\uffec\065\uffec\070\uffec\071\uffec" +
    "\072\uffec\075\uffec\076\uffec\077\uffec\100\uffec\001\002\000" +
    "\142\002\uffd8\005\uffd8\010\uffd8\012\uffd8\015\uffd8\016\uffd8" +
    "\017\uffd8\020\uffd8\021\uffd8\022\uffd8\025\uffd8\026\uffd8\027" +
    "\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8" +
    "\036\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8\044\uffd8\045" +
    "\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8\052\uffd8\053\uffd8" +
    "\054\uffd8\055\uffd8\056\uffd8\057\uffd8\060\uffd8\061\uffd8\062" +
    "\uffd8\064\uffd8\065\uffd8\070\uffd8\071\uffd8\072\uffd8\075\uffd8" +
    "\076\uffd8\077\uffd8\100\uffd8\001\002\000\062\010\016\015" +
    "\010\016\026\017\006\020\004\022\012\025\045\026\042" +
    "\027\021\030\014\033\015\034\033\035\031\036\030\052" +
    "\044\056\011\060\027\070\032\071\036\072\035\075\043" +
    "\076\034\077\041\100\013\001\002\000\062\010\016\015" +
    "\010\016\026\017\006\020\004\022\012\025\045\026\042" +
    "\027\021\030\014\033\015\034\033\035\031\036\030\052" +
    "\044\056\011\060\027\070\032\071\036\072\035\075\043" +
    "\076\034\077\041\100\013\001\002\000\062\010\016\015" +
    "\010\016\026\017\006\020\004\022\012\025\045\026\042" +
    "\027\021\030\014\033\015\034\033\035\031\036\030\052" +
    "\044\056\011\060\027\070\032\071\036\072\035\075\043" +
    "\076\034\077\041\100\013\001\002\000\112\002\ufff3\005" +
    "\ufff3\010\ufff3\012\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3" +
    "\021\ufff3\022\ufff3\025\ufff3\026\ufff3\027\ufff3\030\ufff3\032" +
    "\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3\046\ufff3\047\ufff3" +
    "\050\ufff3\051\ufff3\052\ufff3\053\ufff3\056\ufff3\060\ufff3\064" +
    "\ufff3\065\ufff3\070\ufff3\071\ufff3\072\ufff3\075\ufff3\076\ufff3" +
    "\077\ufff3\100\ufff3\001\002\000\062\010\016\015\010\016" +
    "\026\017\006\020\004\022\012\025\045\026\042\027\021" +
    "\030\014\033\015\034\033\035\031\036\030\052\044\056" +
    "\011\060\027\070\032\071\036\072\035\075\043\076\034" +
    "\077\041\100\013\001\002\000\062\010\016\015\010\016" +
    "\026\017\006\020\004\022\012\025\045\026\042\027\021" +
    "\030\014\033\015\034\033\035\031\036\030\052\044\056" +
    "\011\060\027\070\032\071\036\072\035\075\043\076\034" +
    "\077\041\100\013\001\002\000\112\002\uffe4\005\uffe4\010" +
    "\uffe4\012\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021\ufff9" +
    "\022\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\032\uffe4\033" +
    "\uffe4\034\uffe4\035\uffe4\036\uffe4\046\uffe4\047\uffe4\050\uffe4" +
    "\051\uffe4\052\uffe4\053\uffe4\056\uffe4\060\uffe4\064\uffe4\065" +
    "\uffe4\070\uffe4\071\uffe4\072\uffe4\075\uffe4\076\uffe4\077\uffe4" +
    "\100\uffe4\001\002\000\112\002\uffe7\005\uffe7\010\uffe7\012" +
    "\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021\ufff9\022\uffe7" +
    "\025\uffe7\026\uffe7\027\uffe7\030\uffe7\032\uffe7\033\uffe7\034" +
    "\uffe7\035\uffe7\036\uffe7\046\uffe7\047\uffe7\050\uffe7\051\uffe7" +
    "\052\uffe7\053\uffe7\056\uffe7\060\uffe7\064\uffe7\065\147\070" +
    "\uffe7\071\uffe7\072\uffe7\075\uffe7\076\uffe7\077\uffe7\100\uffe7" +
    "\001\002\000\112\002\uffe6\005\uffe6\010\uffe6\012\uffe6\015" +
    "\uffe6\016\uffe6\017\uffe6\020\uffe6\021\ufff9\022\uffe6\025\uffe6" +
    "\026\uffe6\027\uffe6\030\uffe6\032\uffe6\033\uffe6\034\uffe6\035" +
    "\uffe6\036\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6" +
    "\053\uffe6\056\uffe6\060\uffe6\064\uffe6\065\147\070\uffe6\071" +
    "\uffe6\072\uffe6\075\uffe6\076\uffe6\077\uffe6\100\uffe6\001\002" +
    "\000\112\002\uffe3\005\uffe3\010\uffe3\012\uffe3\015\uffe3\016" +
    "\uffe3\017\uffe3\020\uffe3\021\ufff9\022\uffe3\025\uffe3\026\uffe3" +
    "\027\uffe3\030\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\036" +
    "\uffe3\046\uffe3\047\uffe3\050\uffe3\051\uffe3\052\uffe3\053\uffe3" +
    "\056\uffe3\060\uffe3\064\uffe3\065\147\070\uffe3\071\uffe3\072" +
    "\uffe3\075\uffe3\076\uffe3\077\uffe3\100\uffe3\001\002\000\112" +
    "\002\uffe2\005\uffe2\010\uffe2\012\uffe2\015\uffe2\016\uffe2\017" +
    "\uffe2\020\uffe2\021\ufff9\022\uffe2\025\uffe2\026\uffe2\027\uffe2" +
    "\030\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\046" +
    "\uffe2\047\uffe2\050\uffe2\051\uffe2\052\uffe2\053\uffe2\056\uffe2" +
    "\060\uffe2\064\uffe2\065\147\070\uffe2\071\uffe2\072\uffe2\075" +
    "\uffe2\076\uffe2\077\uffe2\100\uffe2\001\002\000\016\033\015" +
    "\034\033\075\043\076\034\077\041\100\161\001\002\000" +
    "\010\053\uffc3\061\uffc3\063\uffc3\001\002\000\010\053\uffc2" +
    "\061\uffc2\063\uffc2\001\002\000\004\053\164\001\002\000" +
    "\010\053\uffc4\061\uffc4\063\uffc4\001\002\000\004\053\163" +
    "\001\002\000\152\002\uffc5\005\uffc5\010\uffc5\012\uffc5\015" +
    "\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\025\uffc5" +
    "\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034" +
    "\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5" +
    "\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5\051" +
    "\uffc5\052\uffc5\053\uffc5\054\uffc5\055\uffc5\056\uffc5\057\uffc5" +
    "\060\uffc5\061\uffc5\062\uffc5\063\uffc5\064\uffc5\065\uffc5\067" +
    "\uffc5\070\uffc5\071\uffc5\072\uffc5\073\uffc5\075\uffc5\076\uffc5" +
    "\077\uffc5\100\uffc5\001\002\000\152\002\uffc6\005\uffc6\010" +
    "\uffc6\012\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6" +
    "\022\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6\032" +
    "\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6" +
    "\041\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6\047" +
    "\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6\054\uffc6\055\uffc6" +
    "\056\uffc6\057\uffc6\060\uffc6\061\uffc6\062\uffc6\063\uffc6\064" +
    "\uffc6\065\uffc6\067\uffc6\070\uffc6\071\uffc6\072\uffc6\073\uffc6" +
    "\075\uffc6\076\uffc6\077\uffc6\100\uffc6\001\002\000\016\052" +
    "\051\060\027\070\032\071\036\072\035\075\043\001\002" +
    "\000\004\063\167\001\002\000\016\052\051\060\027\070" +
    "\032\071\036\072\035\075\043\001\002\000\112\002\uffef" +
    "\005\uffef\010\uffef\012\uffef\015\uffef\016\uffef\017\uffef\020" +
    "\uffef\021\uffef\022\uffef\025\uffef\026\uffef\027\uffef\030\uffef" +
    "\032\uffef\033\uffef\034\uffef\035\uffef\036\uffef\046\uffef\047" +
    "\uffef\050\uffef\051\uffef\052\uffef\053\uffef\056\uffef\060\uffef" +
    "\064\uffef\065\uffef\070\uffef\071\uffef\072\uffef\075\uffef\076" +
    "\uffef\077\uffef\100\uffef\001\002\000\062\010\016\015\010" +
    "\016\026\017\006\020\004\022\012\025\045\026\042\027" +
    "\021\030\014\033\015\034\033\035\031\036\030\052\044" +
    "\056\011\060\027\070\032\071\036\072\035\075\043\076" +
    "\034\077\041\100\013\001\002\000\066\002\ufffb\010\ufffb" +
    "\015\ufffb\016\ufffb\017\ufffb\020\ufffb\021\066\022\ufffb\025" +
    "\ufffb\026\ufffb\027\ufffb\030\ufffb\033\ufffb\034\ufffb\035\ufffb" +
    "\036\ufffb\052\ufffb\056\ufffb\060\ufffb\070\ufffb\071\ufffb\072" +
    "\ufffb\075\ufffb\076\ufffb\077\ufffb\100\ufffb\001\002\000\016" +
    "\052\051\060\027\070\032\071\036\072\035\075\043\001" +
    "\002\000\004\063\175\001\002\000\016\052\051\060\027" +
    "\070\032\071\036\072\035\075\043\001\002\000\004\053" +
    "\177\001\002\000\120\002\uffcb\005\uffcb\010\uffcb\012\uffcb" +
    "\015\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb\025" +
    "\uffcb\026\uffcb\027\uffcb\030\uffcb\032\uffcb\033\uffcb\034\uffcb" +
    "\035\uffcb\036\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb\052" +
    "\uffcb\053\uffcb\056\uffcb\060\uffcb\063\uffcb\064\uffcb\065\uffcb" +
    "\067\uffcb\070\uffcb\071\uffcb\072\uffcb\073\uffcb\075\uffcb\076" +
    "\uffcb\077\uffcb\100\uffcb\001\002\000\016\052\051\060\027" +
    "\070\032\071\036\072\035\075\043\001\002\000\004\063" +
    "\202\001\002\000\016\052\051\060\027\070\032\071\036" +
    "\072\035\075\043\001\002\000\004\053\204\001\002\000" +
    "\120\002\uffca\005\uffca\010\uffca\012\uffca\015\uffca\016\uffca" +
    "\017\uffca\020\uffca\021\uffca\022\uffca\025\uffca\026\uffca\027" +
    "\uffca\030\uffca\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca" +
    "\046\uffca\047\uffca\050\uffca\051\uffca\052\uffca\053\uffca\056" +
    "\uffca\060\uffca\063\uffca\064\uffca\065\uffca\067\uffca\070\uffca" +
    "\071\uffca\072\uffca\073\uffca\075\uffca\076\uffca\077\uffca\100" +
    "\uffca\001\002\000\016\052\051\060\027\070\032\071\036" +
    "\072\035\075\043\001\002\000\004\063\207\001\002\000" +
    "\016\052\051\060\027\070\032\071\036\072\035\075\043" +
    "\001\002\000\004\053\211\001\002\000\120\002\uffcc\005" +
    "\uffcc\010\uffcc\012\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc" +
    "\021\uffcc\022\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\032" +
    "\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\046\uffcc\047\uffcc" +
    "\050\uffcc\051\uffcc\052\uffcc\053\uffcc\056\uffcc\060\uffcc\063" +
    "\uffcc\064\uffcc\065\uffcc\067\uffcc\070\uffcc\071\uffcc\072\uffcc" +
    "\073\uffcc\075\uffcc\076\uffcc\077\uffcc\100\uffcc\001\002\000" +
    "\006\061\uffc9\063\222\001\002\000\022\031\uffde\054\uffde" +
    "\055\uffde\056\uffde\057\uffde\061\uffc2\062\uffde\063\uffc2\001" +
    "\002\000\016\031\113\054\120\055\112\056\114\057\110" +
    "\062\217\001\002\000\004\061\216\001\002\000\120\002" +
    "\uffce\005\uffce\010\uffce\012\uffce\015\uffce\016\uffce\017\uffce" +
    "\020\uffce\021\uffce\022\uffce\025\uffce\026\uffce\027\uffce\030" +
    "\uffce\032\uffce\033\uffce\034\uffce\035\uffce\036\uffce\046\uffce" +
    "\047\uffce\050\uffce\051\uffce\052\uffce\053\uffce\056\uffce\060" +
    "\uffce\063\uffce\064\uffce\065\uffce\067\uffce\070\uffce\071\uffce" +
    "\072\uffce\073\uffce\075\uffce\076\uffce\077\uffce\100\uffce\001" +
    "\002\000\024\015\010\016\026\027\021\030\014\052\124" +
    "\056\011\075\043\076\034\077\041\001\002\000\016\031" +
    "\113\054\120\055\112\056\114\057\110\061\221\001\002" +
    "\000\120\002\uffcd\005\uffcd\010\uffcd\012\uffcd\015\uffcd\016" +
    "\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd\025\uffcd\026\uffcd" +
    "\027\uffcd\030\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036" +
    "\uffcd\046\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd" +
    "\056\uffcd\060\uffcd\063\uffcd\064\uffcd\065\uffcd\067\uffcd\070" +
    "\uffcd\071\uffcd\072\uffcd\073\uffcd\075\uffcd\076\uffcd\077\uffcd" +
    "\100\uffcd\001\002\000\014\033\015\034\033\076\034\077" +
    "\041\100\161\001\002\000\004\061\uffc8\001\002\000\024" +
    "\015\010\016\026\027\021\030\014\052\124\056\011\075" +
    "\043\076\034\077\041\001\002\000\016\031\113\053\226" +
    "\054\120\055\112\056\114\057\110\001\002\000\142\002" +
    "\uffd4\005\uffd4\010\uffd4\012\uffd4\015\uffd4\016\uffd4\017\uffd4" +
    "\020\uffd4\021\uffd4\022\uffd4\025\uffd4\026\uffd4\027\uffd4\030" +
    "\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4" +
    "\040\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4\046" +
    "\uffd4\047\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4\054\uffd4" +
    "\055\uffd4\056\uffd4\057\uffd4\060\uffd4\061\uffd4\062\uffd4\064" +
    "\uffd4\065\uffd4\070\uffd4\071\uffd4\072\uffd4\075\uffd4\076\uffd4" +
    "\077\uffd4\100\uffd4\001\002\000\016\052\051\060\027\070" +
    "\032\071\036\072\035\075\043\001\002\000\004\053\231" +
    "\001\002\000\142\002\uffd6\005\uffd6\010\uffd6\012\uffd6\015" +
    "\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\025\uffd6" +
    "\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034" +
    "\uffd6\035\uffd6\036\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6" +
    "\044\uffd6\045\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6\052" +
    "\uffd6\053\uffd6\054\uffd6\055\uffd6\056\uffd6\057\uffd6\060\uffd6" +
    "\061\uffd6\062\uffd6\064\uffd6\065\uffd6\070\uffd6\071\uffd6\072" +
    "\uffd6\075\uffd6\076\uffd6\077\uffd6\100\uffd6\001\002\000\004" +
    "\002\000\001\002\000\062\010\016\015\010\016\026\017" +
    "\006\020\004\022\012\025\045\026\042\027\021\030\014" +
    "\033\015\034\033\035\031\036\030\052\044\056\011\060" +
    "\027\070\032\071\036\072\035\075\043\076\034\077\041" +
    "\100\013\001\002\000\020\021\ufff9\032\235\046\146\047" +
    "\144\050\143\051\142\065\147\001\002\000\004\011\236" +
    "\001\002\000\004\032\237\001\002\000\062\010\016\015" +
    "\010\016\026\017\006\020\004\022\012\025\045\026\042" +
    "\027\021\030\014\033\015\034\033\035\031\036\030\052" +
    "\044\056\011\060\027\070\032\071\036\072\035\075\043" +
    "\076\034\077\041\100\013\001\002\000\006\012\241\021" +
    "\066\001\002\000\004\032\242\001\002\000\062\010\016" +
    "\015\010\016\026\017\006\020\004\022\012\025\045\026" +
    "\042\027\021\030\014\033\015\034\033\035\031\036\030" +
    "\052\044\056\011\060\027\070\032\071\036\072\035\075" +
    "\043\076\034\077\041\100\013\001\002\000\074\002\ufff5" +
    "\005\ufff5\010\ufff5\012\ufff5\015\ufff5\016\ufff5\017\ufff5\020" +
    "\ufff5\021\066\022\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5" +
    "\033\ufff5\034\ufff5\035\ufff5\036\ufff5\052\ufff5\053\ufff5\056" +
    "\ufff5\060\ufff5\070\ufff5\071\ufff5\072\ufff5\075\ufff5\076\ufff5" +
    "\077\ufff5\100\ufff5\001\002\000\024\015\010\016\026\027" +
    "\021\030\014\052\124\056\011\075\043\076\034\077\041" +
    "\001\002\000\016\031\113\053\246\054\120\055\112\056" +
    "\114\057\110\001\002\000\142\002\uffd3\005\uffd3\010\uffd3" +
    "\012\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022" +
    "\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3" +
    "\033\uffd3\034\uffd3\035\uffd3\036\uffd3\040\uffd3\041\uffd3\042" +
    "\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3" +
    "\051\uffd3\052\uffd3\053\uffd3\054\uffd3\055\uffd3\056\uffd3\057" +
    "\uffd3\060\uffd3\061\uffd3\062\uffd3\064\uffd3\065\uffd3\070\uffd3" +
    "\071\uffd3\072\uffd3\075\uffd3\076\uffd3\077\uffd3\100\uffd3\001" +
    "\002\000\062\010\016\015\010\016\026\017\006\020\004" +
    "\022\012\025\045\026\042\027\021\030\014\033\015\034" +
    "\033\035\031\036\030\052\044\056\011\060\027\070\032" +
    "\071\036\072\035\075\043\076\034\077\041\100\252\001" +
    "\002\000\006\021\066\053\uffb3\001\002\000\004\053\253" +
    "\001\002\000\022\021\uffbd\023\uffbd\024\uffbd\050\uffbd\051" +
    "\uffbd\052\247\053\uffbd\065\uffbd\001\002\000\106\002\uffbe" +
    "\005\uffbe\010\uffbe\012\uffbe\015\uffbe\016\uffbe\017\uffbe\020" +
    "\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe" +
    "\027\uffbe\030\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe\050" +
    "\uffbe\051\uffbe\052\uffbe\053\uffbe\056\uffbe\060\uffbe\065\uffbe" +
    "\070\uffbe\071\uffbe\072\uffbe\075\uffbe\076\uffbe\077\uffbe\100" +
    "\uffbe\001\002\000\112\002\uffe5\005\uffe5\010\uffe5\012\uffe5" +
    "\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\ufff9\022\uffe5\025" +
    "\uffe5\026\uffe5\027\uffe5\030\uffe5\032\uffe5\033\uffe5\034\uffe5" +
    "\035\uffe5\036\uffe5\046\146\047\144\050\143\051\142\052" +
    "\uffe5\053\uffe5\056\uffe5\060\uffe5\064\uffe5\065\147\070\uffe5" +
    "\071\uffe5\072\uffe5\075\uffe5\076\uffe5\077\uffe5\100\uffe5\001" +
    "\002\000\106\002\uffbc\005\uffbc\010\uffbc\012\uffbc\015\uffbc" +
    "\016\uffbc\017\uffbc\020\uffbc\021\ufff6\022\uffbc\023\076\024" +
    "\072\025\uffbc\026\uffbc\027\uffbc\030\uffbc\033\uffbc\034\uffbc" +
    "\035\uffbc\036\uffbc\050\073\051\071\052\uffbc\053\uffbc\056" +
    "\uffbc\060\uffbc\065\074\070\uffbc\071\uffbc\072\uffbc\075\uffbc" +
    "\076\uffbc\077\uffbc\100\uffbc\001\002\000\142\002\uffd9\005" +
    "\uffd9\010\uffd9\012\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9" +
    "\021\uffd9\022\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031" +
    "\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\040\uffd9" +
    "\041\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9\046\uffd9\047" +
    "\uffd9\050\uffd9\051\uffd9\052\uffd9\053\uffd9\054\uffd9\055\uffd9" +
    "\056\uffd9\057\uffd9\060\uffd9\061\uffd9\062\uffd9\064\uffd9\065" +
    "\uffd9\070\uffd9\071\uffd9\072\uffd9\075\uffd9\076\uffd9\077\uffd9" +
    "\100\uffd9\001\002\000\024\015\010\016\026\027\021\030" +
    "\014\052\124\056\011\075\043\076\034\077\041\001\002" +
    "\000\016\031\113\053\261\054\120\055\112\056\114\057" +
    "\110\001\002\000\142\002\uffd5\005\uffd5\010\uffd5\012\uffd5" +
    "\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\025" +
    "\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5" +
    "\034\uffd5\035\uffd5\036\uffd5\040\uffd5\041\uffd5\042\uffd5\043" +
    "\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5" +
    "\052\uffd5\053\uffd5\054\uffd5\055\uffd5\056\uffd5\057\uffd5\060" +
    "\uffd5\061\uffd5\062\uffd5\064\uffd5\065\uffd5\070\uffd5\071\uffd5" +
    "\072\uffd5\075\uffd5\076\uffd5\077\uffd5\100\uffd5\001\002\000" +
    "\004\002\ufffd\001\002\000\004\021\270\001\002\000\106" +
    "\002\uffb6\005\uffb6\010\uffb6\012\uffb6\015\uffb6\016\uffb6\017" +
    "\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6" +
    "\026\uffb6\027\uffb6\030\uffb6\033\uffb6\034\uffb6\035\uffb6\036" +
    "\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6\056\uffb6\060\uffb6" +
    "\065\uffb6\070\uffb6\071\uffb6\072\uffb6\075\uffb6\076\uffb6\077" +
    "\uffb6\100\uffb6\001\002\000\006\021\uffb0\063\266\001\002" +
    "\000\004\075\043\001\002\000\004\021\uffaf\001\002\000" +
    "\016\052\051\060\027\070\032\071\036\072\035\075\043" +
    "\001\002\000\006\064\275\073\276\001\002\000\010\063" +
    "\273\064\uffae\073\uffae\001\002\000\016\052\051\060\027" +
    "\070\032\071\036\072\035\075\043\001\002\000\006\064" +
    "\uffad\073\uffad\001\002\000\062\010\016\015\010\016\026" +
    "\017\006\020\004\022\012\025\045\026\042\027\021\030" +
    "\014\033\015\034\033\035\031\036\030\052\044\056\011" +
    "\060\027\070\032\071\036\072\035\075\043\076\034\077" +
    "\041\100\013\001\002\000\062\010\016\015\010\016\026" +
    "\017\006\020\004\022\012\025\045\026\042\027\021\030" +
    "\014\033\015\034\033\035\031\036\030\052\044\056\011" +
    "\060\027\070\032\071\036\072\035\075\043\076\034\077" +
    "\041\100\013\001\002\000\020\021\ufff9\046\146\047\144" +
    "\050\143\051\142\064\300\065\147\001\002\000\062\010" +
    "\016\015\010\016\026\017\006\020\004\022\012\025\045" +
    "\026\042\027\021\030\014\033\015\034\033\035\031\036" +
    "\030\052\044\056\011\060\027\070\032\071\036\072\035" +
    "\075\043\076\034\077\041\100\013\001\002\000\006\005" +
    "\302\021\066\001\002\000\106\002\uffb2\005\uffb2\010\uffb2" +
    "\012\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022" +
    "\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2" +
    "\033\uffb2\034\uffb2\035\uffb2\036\uffb2\050\uffb2\051\uffb2\052" +
    "\uffb2\053\uffb2\056\uffb2\060\uffb2\065\uffb2\070\uffb2\071\uffb2" +
    "\072\uffb2\075\uffb2\076\uffb2\077\uffb2\100\uffb2\001\002\000" +
    "\006\005\304\021\066\001\002\000\106\002\uffb1\005\uffb1" +
    "\010\uffb1\012\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021" +
    "\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1" +
    "\030\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1\050\uffb1\051" +
    "\uffb1\052\uffb1\053\uffb1\056\uffb1\060\uffb1\065\uffb1\070\uffb1" +
    "\071\uffb1\072\uffb1\075\uffb1\076\uffb1\077\uffb1\100\uffb1\001" +
    "\002\000\004\002\ufffe\001\002\000\106\002\uffb5\005\uffb5" +
    "\010\uffb5\012\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021" +
    "\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5" +
    "\030\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5\050\uffb5\051" +
    "\uffb5\052\uffb5\053\uffb5\056\uffb5\060\uffb5\065\uffb5\070\uffb5" +
    "\071\uffb5\072\uffb5\075\uffb5\076\uffb5\077\uffb5\100\uffb5\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\304\000\026\004\006\005\004\006\021\007\037\010" +
    "\022\011\016\012\023\015\024\022\017\023\036\001\001" +
    "\000\010\017\305\020\262\023\264\001\001\000\026\004" +
    "\006\005\004\006\021\007\037\010\022\011\016\012\023" +
    "\015\024\022\304\023\036\001\001\000\010\017\263\020" +
    "\262\023\264\001\001\000\026\004\006\005\004\006\021" +
    "\007\037\010\022\011\016\012\023\015\024\022\261\023" +
    "\036\001\001\000\002\001\001\000\010\010\255\011\016" +
    "\023\125\001\001\000\022\004\054\006\253\007\037\010" +
    "\022\011\016\012\023\015\254\023\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\010\213\011\212" +
    "\012\155\013\214\014\211\023\125\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\004\054\006\055\007" +
    "\061\010\056\011\016\012\023\015\057\023\060\001\001" +
    "\000\002\001\001\000\006\007\046\023\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\051\023\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\004\064\006\021\007\037\010\022" +
    "\011\016\012\023\015\024\023\060\001\001\000\002\001" +
    "\001\000\006\007\067\023\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\106\001\001\000\004\015" +
    "\105\001\001\000\004\015\104\001\001\000\004\015\103" +
    "\001\001\000\002\001\001\000\004\015\076\001\001\000" +
    "\002\001\001\000\004\015\102\001\001\000\004\015\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\010\140\011\016\023\125\001\001\000\010\010" +
    "\137\011\016\023\125\001\001\000\010\010\136\011\016" +
    "\023\125\001\001\000\010\010\135\011\016\023\125\001" +
    "\001\000\010\010\134\011\016\023\125\001\001\000\010" +
    "\010\133\011\016\023\125\001\001\000\010\010\132\011" +
    "\016\023\125\001\001\000\010\010\131\011\016\023\125" +
    "\001\001\000\010\010\130\011\016\023\125\001\001\000" +
    "\010\010\127\011\016\023\125\001\001\000\010\010\124" +
    "\011\016\023\125\001\001\000\002\001\001\000\010\010" +
    "\126\011\016\023\125\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\004\054\006\153" +
    "\007\037\010\022\011\016\012\023\015\024\023\060\001" +
    "\001\000\022\004\054\006\152\007\037\010\022\011\016" +
    "\012\023\015\024\023\060\001\001\000\022\004\054\006" +
    "\151\007\037\010\022\011\016\012\023\015\024\023\060" +
    "\001\001\000\002\001\001\000\022\004\054\006\150\007" +
    "\037\010\022\011\016\012\023\015\024\023\060\001\001" +
    "\000\022\004\054\006\147\007\037\010\022\011\016\012" +
    "\023\015\024\023\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\011\156\012\155\014\157\023\161\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\165\023\047\001\001\000\002\001" +
    "\001\000\006\007\167\023\047\001\001\000\002\001\001" +
    "\000\022\004\171\006\021\007\037\010\022\011\016\012" +
    "\023\015\024\023\060\001\001\000\002\001\001\000\006" +
    "\007\173\023\047\001\001\000\002\001\001\000\006\007" +
    "\175\023\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\200\023\047\001\001\000\002\001\001\000" +
    "\006\007\202\023\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\205\023\047\001\001\000\002\001" +
    "\001\000\006\007\207\023\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\010\217\011\016\023\125\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\011\156\012\155\013\222\014\211" +
    "\001\001\000\002\001\001\000\010\010\224\011\016\023" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\227\023\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\004\054\006\233\007\037" +
    "\010\022\011\016\012\023\015\024\023\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\004\237\006\021\007\037\010\022\011\016\012\023\015" +
    "\024\023\060\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\004\242\006\021\007\037\010\022\011\016\012" +
    "\023\015\024\023\060\001\001\000\002\001\001\000\010" +
    "\010\244\011\016\023\125\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\004\247\006\021\007\037\010\022" +
    "\011\016\012\023\015\024\016\250\023\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\010\257\011\016\023\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\020\266" +
    "\023\264\001\001\000\002\001\001\000\010\007\271\021" +
    "\270\023\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\007\271\021\273\023\047\001\001\000\002\001" +
    "\001\000\022\004\302\006\021\007\037\010\022\011\016" +
    "\012\023\015\024\023\060\001\001\000\022\004\054\006" +
    "\276\007\037\010\022\011\016\012\023\015\024\023\060" +
    "\001\001\000\002\001\001\000\022\004\300\006\021\007" +
    "\037\010\022\011\016\012\023\015\024\023\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= affect 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= expr 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= affect program 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(a+"\\\\"+p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program ::= expr program 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(f+"\\\\"+p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // program ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // affect ::= var AFFECT expr 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(v+"="+e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("affect",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= var 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= bool_expr 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= num_expr 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr ::= set_expr 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr ::= clause_expr 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr ::= IF WHITESPACE bool_expr WHITESPACE THEN WHITESPACE expr ELSE WHITESPACE expr 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String("if "+b+" then"+e1+" else"+e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= set_expr DOT LPAR expr RPAR 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String(s+".("+e+")");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // bool_expr ::= LPAR bool_expr RPAR 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String("("+b+")");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // bool_expr ::= bool 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // bool_expr ::= var 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(v);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // bool_expr ::= expr IN set_expr 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(e+" \\in "+s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // bool_expr ::= SUBSET LPAR set_expr COMMA set_expr 
            {
              String RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(s1+" \\subset "+s2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // bool_expr ::= num_expr EQUAL num_expr 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(n1+" == "+n2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // bool_expr ::= num_expr DIFFERENT num_expr 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(n1+" != "+n2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // bool_expr ::= num_expr LESSER num_expr 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(n1+" < "+n2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // bool_expr ::= num_expr LESSER_OR_EQUAL num_expr 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(n1+" <= "+n2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // bool_expr ::= num_expr GREATER num_expr 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(n1+" > "+n2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // bool_expr ::= num_expr GREATER_OR_EQUAL num_expr 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(n1+" >= "+n2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // bool_expr ::= EMPTY LPAR set_expr RPAR 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String("empty("+s+")");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // bool_expr ::= bool_expr BOOL_AND bool_expr 
            {
              String RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(b1+" \\&\\& "+b2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // bool_expr ::= bool_expr BOOL_OR bool_expr 
            {
              String RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(b1+" || "+b2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // bool_expr ::= NOT bool_expr 
            {
              String RESULT =null;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String( "not "+b2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // bool_expr ::= bool_expr XOR bool_expr 
            {
              String RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(b1+" \\oplus "+b2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // bool_expr ::= bool_expr IMPLIQUE bool_expr 
            {
              String RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(b1+" \\Rightarrow "+b2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // bool_expr ::= bool_expr EQUIV bool_expr 
            {
              String RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(b1+" \\Leftrightarrow "+b2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // bool ::= TRUE 
            {
              String RESULT =null;
		 RESULT = new String("True");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // bool ::= FALSE 
            {
              String RESULT =null;
		 RESULT = new String("False");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // num_expr ::= LPAR num_expr RPAR 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String("("+n+")");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // num_expr ::= nb 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // num_expr ::= var 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(v);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // num_expr ::= num_expr ADD num_expr 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(n1+"+"+n2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // num_expr ::= num_expr MULTIPLY num_expr 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(n1+"*"+n2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // num_expr ::= num_expr SUBSTRACT num_expr 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(n1+"-"+n2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // num_expr ::= SUBSTRACT num_expr 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String("-"+n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // num_expr ::= num_expr DIVIDE num_expr 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(n1+"/"+n2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // num_expr ::= num_expr MOD num_expr 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(n1+" \\% "+n2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // num_expr ::= CARD LPAR set_expr RPAR 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String("card("+s+")");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // num_expr ::= INT LPAR num_expr RPAR 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String("int("+n+")");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // num_expr ::= FLOAT LPAR num_expr RPAR 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String("float("+n+")");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // num_expr ::= SQRT LPAR num_expr RPAR 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String("\\sqrt{"+n+"}");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // nb ::= INTEGER 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nb",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // nb ::= DOUBLENUMBER 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nb",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // set_expr ::= LPAR set_expr RPAR 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String("("+s+")");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // set_expr ::= var 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(v);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // set_expr ::= LCRO set_decl RCRO 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String("["+s+"]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // set_expr ::= LCRO num_expr DODOT num_expr RCRO 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String("["+n1+".."+n2+"]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // set_expr ::= UNION LPAR set_expr COMMA set_expr RPAR 
            {
              String RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String(s1+"\\cup"+s2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // set_expr ::= INTER LPAR set_expr COMMA set_expr RPAR 
            {
              String RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String(s1+"\\cap"+s2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // set_expr ::= DIFF LPAR set_expr COMMA set_expr RPAR 
            {
              String RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String(s1+"\\setminus"+s2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // set_decl ::= atom 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_decl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // set_decl ::= atom COMMA set_decl 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(a+","+s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_decl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // var ::= VAR 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String("\\"+v);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // var ::= VAR LPAR atom RPAR 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String("\\"+v+"("+a+")"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // var ::= VAR LPAR var RPAR 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String("\\"+v+"("+v2+")"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // atom ::= IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // atom ::= bool 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // atom ::= nb 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // clause_expr ::= LPAR clause_expr RPAR 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String("("+c+")");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clause_expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // clause_expr ::= TOP 
            {
              String RESULT =null;
		 RESULT = new String("\\top");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clause_expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // clause_expr ::= BOT 
            {
              String RESULT =null;
		 RESULT = new String("\\bot");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clause_expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // clause_expr ::= IDENTIFIER LPAR term_option RPAR 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String(i+"("+t+")");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clause_expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // clause_expr ::= IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clause_expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // clause_expr ::= NOT clause_expr 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String("\\neg "+c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clause_expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // clause_expr ::= clause_expr AND clause_expr 
            {
              String RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String c1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(c1+" \\wedge "+c2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clause_expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // clause_expr ::= clause_expr OR clause_expr 
            {
              String RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String c1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(c1+" \\vee "+c2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clause_expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // clause_expr ::= clause_expr XOR clause_expr 
            {
              String RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String c1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(c1+" \\oplus "+c2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clause_expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // clause_expr ::= clause_expr IMPLIQUE clause_expr 
            {
              String RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String c1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(c1+" \\Rightarrow "+c2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clause_expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // clause_expr ::= clause_expr EQUIV clause_expr 
            {
              String RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String c1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(c1+" \\Leftrightarrow "+c2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clause_expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // clause_expr ::= BIGAND big_body 
            {
              String RESULT =null;
		int bbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String bb = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String("\\bigwedge"+bb);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clause_expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // clause_expr ::= BIGOR big_body 
            {
              String RESULT =null;
		int bbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String bb = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String("\\bigvee "+bb);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clause_expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // term_option ::= IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_option",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // term_option ::= expr 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_option",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // big_body ::= var_list IN set_list WHEN bool_expr TWODOT expr END 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String("\\limits_{\\substack{"+v+"\\in"+s+"\\\\"+ b+"}}"+e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("big_body",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // big_body ::= var_list IN set_list TWODOT expr END 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String("\\limits_{"+v+"\\in"+s+"}"+e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("big_body",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // var_list ::= var 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(v);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // var_list ::= var COMMA var_list 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String vl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(v+","+vl);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // set_list ::= set_expr 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_list",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // set_list ::= set_expr COMMA set_list 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new String(s+","+sl);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_list",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}




    public static void main(String args[])
    {
        try {
            parser p = new parser(new Lexi(new BufferedReader(new FileReader("myTest.touistl"))));
            System.out.print(p.parse().value);
        }catch(Exception e) {
            e.printStackTrace();
            //System.err.println(e.getStackTrace().toString());
        }
    }
            
            
}
