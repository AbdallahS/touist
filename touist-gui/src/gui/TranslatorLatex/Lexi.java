/* The following code was generated by JFlex 1.4.1 on 18/03/15 11:10 */
package gui.TranslatorLatex;

import java.io.BufferedReader;
import java.io.FileReader;
/* The following code was generated by JFlex 1.4.1 on 19/03/15 08:40 */

import java_cup.runtime.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 19/03/15 08:40 from the specification file
 * <tt>latex.flex</tt>
 */
class Lexi implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\5\1\0\1\3\1\3\22\0\1\3\1\42\2\0"+
    "\1\7\1\0\1\45\1\0\1\47\1\50\1\52\1\51\1\57\1\53"+
    "\1\6\1\54\12\1\1\60\1\10\1\43\1\41\1\44\1\7\1\0"+
    "\1\2\1\40\21\2\1\37\6\2\1\55\1\0\1\56\1\0\1\4"+
    "\1\0\1\27\1\11\1\32\1\16\1\12\1\21\1\13\1\30\1\14"+
    "\2\2\1\26\1\24\1\15\1\22\1\34\1\36\1\23\1\17\1\20"+
    "\1\25\1\2\1\31\1\33\1\35\1\2\1\0\1\46\uff83\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\1\5\2\1"+
    "\21\3\1\6\1\1\1\7\1\10\2\1\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\2\0\1\23\1\0\1\24\1\25\5\3\1\26\1\27"+
    "\12\3\1\30\11\3\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\2\3\1\41\2\3\1\42\1\43"+
    "\1\3\1\44\7\3\1\45\1\3\1\46\3\3\1\47"+
    "\1\50\1\51\1\52\4\3\1\53\1\3\1\54\1\55"+
    "\1\3\1\56\1\57\1\60\4\3\1\61\1\3\1\62"+
    "\1\63\1\64\1\3\1\65\1\66\2\3\1\67\1\70"+
    "\1\71\1\3\1\72\1\73\2\3\1\74\1\3\1\75";

  private static int [] zzUnpackAction() {
    int [] result = new int[146];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\u0157"+
    "\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae\0\u02df"+
    "\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436\0\u0467"+
    "\0\u0498\0\u04c9\0\u04fa\0\u052b\0\u055c\0\u058d\0\u05be\0\u05ef"+
    "\0\61\0\61\0\61\0\61\0\61\0\61\0\61\0\61"+
    "\0\61\0\61\0\365\0\u0620\0\61\0\u0157\0\u0651\0\u0682"+
    "\0\u06b3\0\u06e4\0\u0715\0\u0746\0\u0777\0\u07a8\0\223\0\u07d9"+
    "\0\u080a\0\u083b\0\u086c\0\u089d\0\u08ce\0\u08ff\0\u0930\0\u0961"+
    "\0\u0992\0\223\0\u09c3\0\u09f4\0\u0a25\0\u0a56\0\u0a87\0\u0ab8"+
    "\0\u0ae9\0\u0b1a\0\u0b4b\0\61\0\61\0\61\0\u0b7c\0\61"+
    "\0\61\0\61\0\u0620\0\u0bad\0\u0bde\0\223\0\u0c0f\0\u0c40"+
    "\0\u0c71\0\223\0\u0ca2\0\u0cd3\0\u0d04\0\u0d35\0\u0d66\0\u0d97"+
    "\0\u0dc8\0\u0df9\0\u0e2a\0\223\0\u0e5b\0\223\0\u0e8c\0\u0ebd"+
    "\0\u0eee\0\223\0\223\0\223\0\61\0\u0f1f\0\u0f50\0\u0f81"+
    "\0\u0fb2\0\223\0\u0fe3\0\223\0\223\0\u1014\0\223\0\223"+
    "\0\223\0\u1045\0\u1076\0\u10a7\0\u10d8\0\223\0\u1109\0\223"+
    "\0\223\0\223\0\u113a\0\223\0\223\0\u116b\0\u119c\0\223"+
    "\0\223\0\223\0\u11cd\0\223\0\223\0\u11fe\0\u122f\0\223"+
    "\0\u1260\0\223";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[146];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\5\1\7\1\10"+
    "\1\11\1\12\1\13\1\4\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\4\1\23\1\24\1\4\1\25"+
    "\1\4\1\26\1\27\1\30\3\4\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\62\0"+
    "\1\3\1\4\1\0\1\53\1\0\1\54\2\0\30\4"+
    "\21\0\2\4\1\0\1\4\4\0\30\4\23\0\1\5"+
    "\1\0\1\5\54\0\1\53\1\4\1\0\1\53\4\0"+
    "\30\4\26\0\1\55\53\0\1\56\1\57\1\0\1\56"+
    "\4\0\30\57\30\0\1\60\51\0\2\4\1\0\1\4"+
    "\4\0\1\4\1\61\1\4\1\62\24\4\21\0\2\4"+
    "\1\0\1\4\4\0\4\4\1\63\6\4\1\64\1\4"+
    "\1\65\12\4\21\0\2\4\1\0\1\4\4\0\4\4"+
    "\1\66\3\4\1\67\17\4\21\0\2\4\1\0\1\4"+
    "\4\0\11\4\1\70\16\4\21\0\2\4\1\0\1\4"+
    "\4\0\3\4\1\71\24\4\21\0\2\4\1\0\1\4"+
    "\4\0\1\4\1\72\12\4\1\73\10\4\1\74\2\4"+
    "\21\0\2\4\1\0\1\4\4\0\12\4\1\75\4\4"+
    "\1\76\10\4\21\0\2\4\1\0\1\4\4\0\11\4"+
    "\1\77\3\4\1\100\1\101\11\4\21\0\2\4\1\0"+
    "\1\4\4\0\12\4\1\102\15\4\21\0\2\4\1\0"+
    "\1\4\4\0\11\4\1\103\16\4\21\0\2\4\1\0"+
    "\1\4\4\0\4\4\1\104\23\4\21\0\2\4\1\0"+
    "\1\4\4\0\4\4\1\105\23\4\21\0\2\4\1\0"+
    "\1\4\4\0\17\4\1\106\10\4\21\0\2\4\1\0"+
    "\1\4\4\0\11\4\1\107\4\4\1\110\11\4\21\0"+
    "\2\4\1\0\1\4\4\0\11\4\1\111\16\4\21\0"+
    "\2\4\1\0\1\4\4\0\11\4\1\112\16\4\21\0"+
    "\2\4\1\0\1\4\4\0\11\4\1\113\16\4\61\0"+
    "\1\114\2\0\1\115\55\0\1\116\60\0\1\117\60\0"+
    "\1\120\64\0\1\121\61\0\1\122\13\0\1\123\60\0"+
    "\2\57\1\0\1\57\4\0\30\57\20\0\5\60\1\0"+
    "\53\60\1\0\2\4\1\0\1\4\4\0\2\4\1\124"+
    "\25\4\21\0\2\4\1\0\1\4\4\0\2\4\1\125"+
    "\25\4\21\0\2\4\1\0\1\4\4\0\5\4\1\126"+
    "\22\4\21\0\2\4\1\0\1\4\4\0\23\4\1\127"+
    "\4\4\21\0\2\4\1\0\1\4\4\0\6\4\1\130"+
    "\21\4\21\0\2\4\1\0\1\4\4\0\7\4\1\131"+
    "\20\4\21\0\2\4\1\0\1\4\4\0\7\4\1\132"+
    "\20\4\21\0\2\4\1\0\1\4\4\0\10\4\1\133"+
    "\17\4\21\0\2\4\1\0\1\4\4\0\7\4\1\134"+
    "\20\4\21\0\2\4\1\0\1\4\4\0\1\135\27\4"+
    "\21\0\2\4\1\0\1\4\4\0\12\4\1\136\15\4"+
    "\21\0\2\4\1\0\1\4\4\0\14\4\1\137\13\4"+
    "\21\0\2\4\1\0\1\4\4\0\1\4\1\140\26\4"+
    "\21\0\2\4\1\0\1\4\4\0\12\4\1\141\15\4"+
    "\21\0\2\4\1\0\1\4\4\0\11\4\1\142\16\4"+
    "\21\0\2\4\1\0\1\4\4\0\15\4\1\143\12\4"+
    "\21\0\2\4\1\0\1\4\4\0\5\4\1\144\22\4"+
    "\21\0\2\4\1\0\1\4\4\0\3\4\1\145\24\4"+
    "\21\0\2\4\1\0\1\4\4\0\5\4\1\146\22\4"+
    "\21\0\2\4\1\0\1\4\4\0\1\4\1\147\26\4"+
    "\21\0\2\4\1\0\1\4\4\0\4\4\1\150\23\4"+
    "\21\0\2\4\1\0\1\4\4\0\12\4\1\151\15\4"+
    "\21\0\2\4\1\0\1\4\4\0\12\4\1\152\15\4"+
    "\21\0\2\4\1\0\1\4\4\0\23\4\1\153\4\4"+
    "\21\0\2\4\1\0\1\4\4\0\7\4\1\154\20\4"+
    "\64\0\1\155\15\0\2\4\1\0\1\4\4\0\3\4"+
    "\1\156\24\4\21\0\2\4\1\0\1\4\4\0\11\4"+
    "\1\157\4\4\1\160\11\4\21\0\2\4\1\0\1\4"+
    "\4\0\7\4\1\161\20\4\21\0\2\4\1\0\1\4"+
    "\4\0\1\4\1\162\26\4\21\0\2\4\1\0\1\4"+
    "\4\0\1\4\1\163\26\4\21\0\2\4\1\0\1\4"+
    "\4\0\10\4\1\164\17\4\21\0\2\4\1\0\1\4"+
    "\4\0\6\4\1\165\21\4\21\0\2\4\1\0\1\4"+
    "\4\0\6\4\1\166\21\4\21\0\2\4\1\0\1\4"+
    "\4\0\7\4\1\167\20\4\21\0\2\4\1\0\1\4"+
    "\4\0\1\4\1\170\26\4\21\0\2\4\1\0\1\4"+
    "\4\0\4\4\1\171\23\4\21\0\2\4\1\0\1\4"+
    "\4\0\13\4\1\172\14\4\21\0\2\4\1\0\1\4"+
    "\4\0\16\4\1\173\11\4\21\0\2\4\1\0\1\4"+
    "\4\0\6\4\1\174\21\4\21\0\2\4\1\0\1\4"+
    "\4\0\11\4\1\175\16\4\21\0\2\4\1\0\1\4"+
    "\4\0\4\4\1\176\23\4\21\0\2\4\1\0\1\4"+
    "\4\0\6\4\1\177\21\4\21\0\2\4\1\0\1\4"+
    "\4\0\5\4\1\200\22\4\21\0\2\4\1\0\1\4"+
    "\4\0\4\4\1\201\23\4\21\0\2\4\1\0\1\4"+
    "\4\0\12\4\1\202\15\4\21\0\2\4\1\0\1\4"+
    "\4\0\4\4\1\203\23\4\21\0\2\4\1\0\1\4"+
    "\4\0\24\4\1\204\3\4\21\0\2\4\1\0\1\4"+
    "\4\0\12\4\1\205\15\4\21\0\2\4\1\0\1\4"+
    "\4\0\1\4\1\206\26\4\21\0\2\4\1\0\1\4"+
    "\4\0\14\4\1\207\13\4\21\0\2\4\1\0\1\4"+
    "\4\0\7\4\1\210\20\4\21\0\2\4\1\0\1\4"+
    "\4\0\1\4\1\211\26\4\21\0\2\4\1\0\1\4"+
    "\4\0\4\4\1\212\23\4\21\0\2\4\1\0\1\4"+
    "\4\0\7\4\1\213\20\4\21\0\2\4\1\0\1\4"+
    "\4\0\5\4\1\214\22\4\21\0\2\4\1\0\1\4"+
    "\4\0\7\4\1\215\20\4\21\0\2\4\1\0\1\4"+
    "\4\0\15\4\1\216\12\4\21\0\2\4\1\0\1\4"+
    "\4\0\16\4\1\217\11\4\21\0\2\4\1\0\1\4"+
    "\4\0\16\4\1\220\11\4\21\0\2\4\1\0\1\4"+
    "\4\0\4\4\1\221\23\4\21\0\2\4\1\0\1\4"+
    "\4\0\7\4\1\222\20\4\20\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4753];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\36\1\12\11\2\0\1\11\1\0\35\1"+
    "\3\11\1\1\3\11\32\1\1\11\45\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[146];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	private Symbol symbol(int type) {
		return new Symbol(type, yyline, yycolumn);
	}
	private Symbol symbol(int type, Object value) {
		return new Symbol(type, yyline, yycolumn, value);
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexi(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexi(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 138) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 41: 
          { return symbol(sym.BOT);
          }
        case 62: break;
        case 33: 
          { return symbol(sym.END);
          }
        case 63: break;
        case 49: 
          { return symbol(sym.WHEN);
          }
        case 64: break;
        case 1: 
          { System.out.println(yytext()+" ERROR_IDENTIFIER");return symbol(sym.ERROR_IDENTIFIER,new String(yytext()));
          }
        case 65: break;
        case 34: 
          { return symbol(sym.INT);
          }
        case 66: break;
        case 54: 
          { return symbol(sym.INTER);
          }
        case 67: break;
        case 45: 
          { return symbol(sym.SETS);
          }
        case 68: break;
        case 27: 
          { return symbol(sym.DIFFERENT);
          }
        case 69: break;
        case 22: 
          { return symbol(sym.IN);
          }
        case 70: break;
        case 53: 
          { return symbol(sym.EMPTY);
          }
        case 71: break;
        case 17: 
          { return symbol(sym.COMMA);
          }
        case 72: break;
        case 32: 
          { return symbol(sym.DOUBLENUMBER,new String(yytext()));
          }
        case 73: break;
        case 24: 
          { return symbol(sym.OR);
          }
        case 74: break;
        case 11: 
          { return symbol(sym.ADD);
          }
        case 75: break;
        case 48: 
          { return symbol(sym.THEN);
          }
        case 76: break;
        case 3: 
          { return symbol(sym.IDENTIFIER,new String(yytext()));
          }
        case 77: break;
        case 6: 
          { return symbol(sym.AFFECT);
          }
        case 78: break;
        case 10: 
          { return symbol(sym.RPAR);
          }
        case 79: break;
        case 46: 
          { return symbol(sym.SQRT);
          }
        case 80: break;
        case 16: 
          { return symbol(sym.RCRO);
          }
        case 81: break;
        case 23: 
          { return symbol(sym.IF);
          }
        case 82: break;
        case 57: 
          { return symbol(sym.UNION);
          }
        case 83: break;
        case 61: 
          { return symbol(sym.CONSTANT);
          }
        case 84: break;
        case 38: 
          { return symbol(sym.AND);
          }
        case 85: break;
        case 58: 
          { return symbol(sym.BIGAND);
          }
        case 86: break;
        case 13: 
          { return symbol(sym.SUBSTRACT);
          }
        case 87: break;
        case 2: 
          { return symbol(sym.INTEGER,new String(yytext()));
          }
        case 88: break;
        case 36: 
          { return symbol(sym.SET);
          }
        case 89: break;
        case 42: 
          { return symbol(sym.EQUIV);
          }
        case 90: break;
        case 39: 
          { return symbol(sym.XOR);
          }
        case 91: break;
        case 51: 
          { return symbol(sym.BEGIN);
          }
        case 92: break;
        case 20: 
          { return symbol(sym.VAR,new String(yytext()));
          }
        case 93: break;
        case 9: 
          { return symbol(sym.LPAR);
          }
        case 94: break;
        case 18: 
          { return symbol(sym.TWODOT);
          }
        case 95: break;
        case 60: 
          { return symbol(sym.FORMULA);
          }
        case 96: break;
        case 44: 
          { return symbol(sym.DIFF);
          }
        case 97: break;
        case 12: 
          { return symbol(sym.MULTIPLY);
          }
        case 98: break;
        case 52: 
          { return symbol(sym.BIGOR);
          }
        case 99: break;
        case 15: 
          { return symbol(sym.LCRO);
          }
        case 100: break;
        case 8: 
          { return symbol(sym.GREATER);
          }
        case 101: break;
        case 25: 
          { return symbol(sym.EQUAL);
          }
        case 102: break;
        case 7: 
          { return symbol(sym.LESSER);
          }
        case 103: break;
        case 21: 
          { return symbol(sym.COMMENT,new String(yytext()));
          }
        case 104: break;
        case 31: 
          { System.out.println(yytext()+" BOOL_OR");return symbol(sym.BOOL_OR);
          }
        case 105: break;
        case 55: 
          { return symbol(sym.FLOAT);
          }
        case 106: break;
        case 35: 
          { return symbol(sym.NOT);
          }
        case 107: break;
        case 5: 
          { return symbol(sym.DOT);
          }
        case 108: break;
        case 28: 
          { System.out.println(yytext()+" LESSER_OR_EQUAL");return symbol(sym.LESSER_OR_EQUAL);
          }
        case 109: break;
        case 59: 
          { return symbol(sym.SUBSET);
          }
        case 110: break;
        case 47: 
          { return symbol(sym.TRUE);
          }
        case 111: break;
        case 40: 
          { return symbol(sym.TOP);
          }
        case 112: break;
        case 14: 
          { return symbol(sym.DIVIDE);
          }
        case 113: break;
        case 19: 
          { return symbol(sym.DODOT);
          }
        case 114: break;
        case 50: 
          { return symbol(sym.CARD);
          }
        case 115: break;
        case 29: 
          { System.out.println(yytext()+" GREATER_OR_EQUAL");return symbol(sym.GREATER_OR_EQUAL);
          }
        case 116: break;
        case 26: 
          { return symbol(sym.IMPLIQUE);
          }
        case 117: break;
        case 56: 
          { return symbol(sym.FALSE);
          }
        case 118: break;
        case 30: 
          { System.out.println(yytext()+" BOOL_AND");return symbol(sym.BOOL_AND);
          }
        case 119: break;
        case 37: 
          { return symbol(sym.MOD);
          }
        case 120: break;
        case 43: 
          { return symbol(sym.ELSE);
          }
        case 121: break;
        case 4: 
          { 
          }
        case 122: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(sym.EOF);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


  public static void main(String args[]) {
    try { 
    Lexi lex = new Lexi(new BufferedReader(new FileReader("test.touistl")));
    
    lex.zzRefill();
    while(lex.next_token().sym != sym.EOF)
    {
    }
    }
    catch (Exception E) {
        System.err.println("mdrrrr");
    }
    System.err.println("the end");
  }
  
}
